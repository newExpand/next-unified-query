name: Dependency Updates

on:
  schedule:
    # 매주 월요일 오전 9시 (KST)
    - cron: '0 0 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # 1. 의존성 업데이트 확인
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check for updates
        id: check-updates
        run: |
          # 업데이트 가능한 패키지 확인
          npx npm-check-updates --format json > updates.json || true
          
          # 업데이트가 있는지 확인
          if [ -s updates.json ] && [ "$(cat updates.json)" != "{}" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Updates available:"
            cat updates.json
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No updates available"
          fi

      - name: Update dependencies
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          # 패치 및 마이너 업데이트만 자동 적용
          npx npm-check-updates -u --target minor
          
          # pnpm 업데이트
          pnpm update --recursive
          
          # lockfile 업데이트
          pnpm install

      - name: Run tests after update
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          pnpm lint
          pnpm typecheck
          pnpm test
          pnpm build

      - name: Create Pull Request
        if: steps.check-updates.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: '🔄 Weekly Dependency Updates'
          body: |
            ## 📦 Dependency Updates
            
            This PR contains automated dependency updates for patch and minor versions.
            
            ### Changes
            ```json
            $(cat updates.json)
            ```
            
            ### Checklist
            - [x] All tests passing
            - [x] Type checking successful
            - [x] Linting successful
            - [x] Build successful
            
            ### Notes
            - Only patch and minor updates are included
            - Major version updates require manual review
            - Security updates are prioritized
            
            ---
            *This PR was automatically generated by the dependency update workflow.*
          branch: deps/weekly-update
          delete-branch: true
          labels: |
            dependencies
            automated

  # 2. 보안 취약점 스캔
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run security audit
        id: audit
        run: |
          # Run audit and capture output
          pnpm audit --json > audit-report.json || true
          
          # Check for vulnerabilities
          if grep -q '"severity":"critical"' audit-report.json || grep -q '"severity":"high"' audit-report.json; then
            echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "Found security vulnerabilities!"
          else
            echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "No critical or high vulnerabilities found"
          fi

      - name: Upload audit report
        if: steps.audit.outputs.has_vulnerabilities == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30

      - name: Create security issue
        if: steps.audit.outputs.has_vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            
            const issueBody = `## 🚨 Security Vulnerabilities Detected
            
            The automated security scan has detected vulnerabilities in the project dependencies.
            
            ### Summary
            - **Critical**: ${report.metadata.vulnerabilities.critical || 0}
            - **High**: ${report.metadata.vulnerabilities.high || 0}
            - **Moderate**: ${report.metadata.vulnerabilities.moderate || 0}
            - **Low**: ${report.metadata.vulnerabilities.low || 0}
            
            ### Action Required
            Please review the security audit report and update the affected dependencies.
            
            ### Commands to fix
            \`\`\`bash
            pnpm audit fix
            \`\`\`
            
            ---
            *This issue was automatically created by the security scan workflow.*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security: Vulnerabilities detected in dependencies',
              body: issueBody,
              labels: ['security', 'dependencies', 'automated']
            });

  # 3. 라이선스 검증
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check licenses
        run: |
          npx license-checker --production --excludePrivatePackages --json > licenses.json
          
          # Check for problematic licenses
          if grep -iE '"licenses":\s*"(GPL|AGPL|LGPL|SSPL)"' licenses.json; then
            echo "Found potentially problematic licenses!"
            exit 1
          fi
          
          echo "All licenses appear to be compatible"

      - name: Generate license report
        run: |
          npx license-checker --production --excludePrivatePackages --out LICENSES.txt
          echo "License report generated successfully"