name: Deploy to Vercel

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # 1. ÎπåÎìú Î∞è Î∞∞Ìè¨ (ÌîÑÎ°úÎçïÏÖò)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (!github.event.inputs.environment || github.event.inputs.environment == 'production')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false,
              required_contexts: [],
              production_environment: true
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment completed successfully'
            });

  # 2. ÌîÑÎ¶¨Î∑∞ Î∞∞Ìè¨
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event.inputs.environment && github.event.inputs.environment == 'preview')
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `üöÄ **Preview Deployment Ready!**
            
            View deployment: ${{ steps.deploy.outputs.url }}
            
            | Check | Status |
            |-------|--------|
            | Build | ‚úÖ Success |
            | Preview | ‚úÖ Ready |
            
            *This preview will be updated automatically on new commits.*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # 3. Î∞∞Ìè¨ ÌõÑ ÏÑ±Îä• ÌÖåÏä§Ìä∏
  performance-test:
    name: Performance Test
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-production.outputs.url }}
            ${{ needs.deploy-production.outputs.url }}/docs
            ${{ needs.deploy-production.outputs.url }}/docs/getting-started
          budgetPath: ./budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run Web Vitals test
        run: |
          npx web-vitals-cli ${{ needs.deploy-production.outputs.url }} \
            --lcp-threshold=2500 \
            --fid-threshold=100 \
            --cls-threshold=0.1

  # 4. Î∞∞Ìè¨ ÌõÑ Î≥¥Ïïà Í≤ÄÏ¶ù
  post-deploy-security:
    name: Post-deployment Security Check
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          cd apps/docs
          pnpm install --frozen-lockfile

      - name: Run production security tests
        run: |
          cd apps/docs
          TEST_URL=${{ needs.deploy-production.outputs.url }} pnpm test:security

      - name: Check security headers
        run: |
          npx @securityheaders/cli ${{ needs.deploy-production.outputs.url }}

  # 5. Î∞∞Ìè¨ ÏïåÎ¶º
  notify:
    name: Send Notifications
    needs: [deploy-production, performance-test, post-deploy-security]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.deploy-production.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = `${status} Production deployment ${{ needs.deploy-production.result }}`;
            
            // Create a deployment status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ needs.deploy-production.result }}',
              target_url: '${{ needs.deploy-production.outputs.url }}',
              description: message,
              context: 'vercel/production'
            });