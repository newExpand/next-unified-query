{"version":3,"sources":["../src/types/index.ts","../src/interceptors.ts","../src/utils/url.ts","../src/utils/config.ts","../src/utils/data.ts","../src/utils/timeout.ts","../src/utils/response.ts","../src/utils/error.ts","../src/core/request.ts","../src/methods/index.ts","../src/core/client.ts","../src/fetch.ts","../src/query/factories/query-factory.ts","../src/query/factories/mutation-factory.ts","../src/query/cache/query-cache.ts","../src/query/client/query-client.ts","../src/query/client/query-client-manager.ts","../src/query/observer/utils/structural-sharing.ts","../src/query/observer/utils/tracked-result.ts","../src/query/observer/managers/fetch-manager.ts","../src/query/observer/managers/options-manager.ts","../src/query/observer/managers/placeholder-manager.ts","../src/query/observer/managers/result-computer.ts","../src/query/observer/query-observer.ts","../src/query/ssr/ssr-prefetch.ts"],"names":["ContentType","ResponseType","request","options","trim","isEmpty","pickBy","isNil","compact","isString","isFunction","interceptors","z","fetchError","processedError","ERROR_MESSAGES","isArray","QuickLRU","forEach","isEqual","fetchFn","data","isPlainObject","keys","merge","isNotNil","pick"],"mappings":"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","file":"index.js","sourcesContent":["import type { z } from \"zod/v4\";\n\n/**\n * 컨텐츠 타입 열거형\n */\nexport enum ContentType {\n  /**\n   * JSON 데이터 (application/json)\n   */\n  JSON = \"application/json\",\n\n  /**\n   * URL 인코딩된 폼 데이터 (application/x-www-form-urlencoded)\n   */\n  FORM = \"application/x-www-form-urlencoded\",\n\n  /**\n   * 일반 텍스트 (text/plain)\n   */\n  TEXT = \"text/plain\",\n\n  /**\n   * 바이너리 데이터 (application/octet-stream)\n   */\n  BLOB = \"application/octet-stream\",\n\n  /**\n   * 멀티파트 폼 데이터 (multipart/form-data)\n   */\n  MULTIPART = \"multipart/form-data\",\n\n  /**\n   * XML 문서 (application/xml)\n   */\n  XML = \"application/xml\",\n\n  /**\n   * HTML 문서 (text/html)\n   */\n  HTML = \"text/html\",\n}\n\n/**\n * 응답 타입 열거형\n */\nexport enum ResponseType {\n  /**\n   * JSON 응답 (자동 파싱)\n   */\n  JSON = \"json\",\n\n  /**\n   * 텍스트 응답 (text/plain, HTML, XML 등)\n   */\n  TEXT = \"text\",\n\n  /**\n   * Blob 응답 (이미지, 파일 등 바이너리 데이터)\n   */\n  BLOB = \"blob\",\n\n  /**\n   * ArrayBuffer 응답 (바이너리 데이터)\n   */\n  ARRAY_BUFFER = \"arraybuffer\",\n\n  /**\n   * 원시 응답 (Response 객체 그대로 반환)\n   */\n  RAW = \"raw\",\n}\n\n/**\n * HTTP 메서드 타입\n */\nexport type HttpMethod =\n  | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\";\n\n/**\n * HTTP 에러 클래스\n */\nexport class FetchError extends Error {\n  /**\n   * 에러 이름\n   */\n  name = \"FetchError\";\n\n  /**\n   * 에러 코드\n   */\n  code?: string;\n\n  /**\n   * 응답 정보 (HTTP 에러인 경우)\n   */\n  response?: {\n    data: unknown;\n    status: number;\n    statusText: string;\n    headers: Headers;\n  };\n\n  /**\n   * 요청 객체\n   */\n  request?: Request;\n\n  /**\n   * 요청 설정\n   */\n  config: RequestConfig;\n\n  /**\n   * FetchError 생성자\n   * @param message 에러 메시지\n   * @param config 요청 설정\n   * @param code 에러 코드\n   * @param request 요청 객체\n   * @param response 응답 객체\n   * @param responseData 응답 데이터\n   */\n  constructor(\n    message: string,\n    config: RequestConfig,\n    code?: string,\n    request?: Request,\n    response?: Response,\n    responseData?: unknown\n  ) {\n    super(message);\n    this.config = config;\n    this.code = code;\n    this.request = request;\n\n    if (response) {\n      this.response = {\n        data: responseData,\n        status: response.status,\n        statusText: response.statusText,\n        headers: response.headers,\n      };\n    }\n  }\n}\n\n/**\n * 401 인증 오류 자동 재시도 옵션\n */\nexport interface AuthRetryOption {\n  /**\n   * 최대 재시도 횟수 (기본값: 1)\n   */\n  limit?: number;\n  /**\n   * 재시도할 HTTP 상태 코드 목록 (기본값: [401])\n   * 커스텀 상태 코드(예: 401004 등)도 지정 가능\n   */\n  statusCodes?: number[];\n  /**\n   * 재시도 전 실행할 핸들러 (true 반환 시 재시도)\n   */\n  handler: (error: FetchError, config: RequestConfig) => Promise<boolean>;\n  /**\n   * 커스텀 재시도 조건 함수 (true 반환 시 handler 실행)\n   * 상태코드 외에 추가 조건이 필요할 때 사용\n   */\n  shouldRetry?: (error: FetchError, config: RequestConfig) => boolean;\n}\n\n/**\n * 기본 설정 옵션 인터페이스\n */\nexport interface FetchConfig\n  extends Omit<RequestInit, \"signal\" | \"headers\" | \"body\" | \"method\"> {\n  /**\n   * 기본 URL\n   */\n  baseURL?: string;\n\n  /**\n   * 요청 타임아웃 (ms)\n   */\n  timeout?: number;\n\n  /**\n   * 요청 헤더\n   */\n  headers?: Record<string, string>;\n\n  /**\n   * 요청 쿼리 파라미터\n   */\n  params?: Record<string, string | number | boolean | undefined | null>;\n\n  /**\n   * 자동 재시도 설정\n   */\n  retry?:\n    | number\n    | {\n        limit: number; // 최대 재시도 횟수\n        statusCodes?: number[]; // 재시도할 상태 코드\n        backoff?: \"linear\" | \"exponential\" | ((retryCount: number) => number);\n      };\n\n  /**\n   * 응답을 JSON으로 파싱 여부\n   * @deprecated responseType을 사용하세요\n   */\n  parseJSON?: boolean;\n\n  /**\n   * 응답 데이터 검증을 위한 Zod 스키마\n   */\n  schema?: z.ZodType;\n\n  /**\n   * Next.js fetch 옵션\n   */\n  next?: {\n    /**\n     * 재검증 시간(초)\n     */\n    revalidate?: number | false;\n    /**\n     * 태그 기반 재검증을 위한 태그 배열\n     */\n    tags?: string[];\n  };\n\n  /**\n   * 요청 취소를 위한 AbortSignal\n   * 외부에서 AbortController를 통해 요청을 취소할 수 있습니다.\n   */\n  signal?: AbortSignal;\n\n  /**\n   * 컨텐츠 타입 설정\n   * 요청 본문의 Content-Type을 지정합니다.\n   */\n  contentType?: ContentType | string;\n\n  /**\n   * 응답 타입 설정\n   * 서버 응답을 어떻게 파싱할지 지정합니다.\n   */\n  responseType?: ResponseType;\n\n  /**\n   * 401 인증 오류 자동 재시도 옵션\n   */\n  authRetry?: AuthRetryOption;\n}\n\n/**\n * 특정 요청에 대한 설정 인터페이스\n */\nexport interface RequestConfig extends FetchConfig {\n  /**\n   * 요청 URL\n   */\n  url?: string;\n\n  /**\n   * HTTP 메서드\n   */\n  method?: HttpMethod;\n\n  /**\n   * 요청 본문\n   */\n  data?: unknown;\n\n  /**\n   * 내부용: 401 재시도 카운트\n   */\n  _authRetryCount?: number;\n}\n\n/**\n * 응답 객체 인터페이스\n */\nexport interface NextTypeResponse<T = unknown> {\n  /**\n   * 서버 응답 데이터\n   */\n  data: T;\n\n  /**\n   * HTTP 상태 코드\n   */\n  status: number;\n\n  /**\n   * HTTP 상태 메시지\n   */\n  statusText: string;\n\n  /**\n   * 응답 헤더\n   */\n  headers: Headers;\n\n  /**\n   * 요청 설정\n   */\n  config: RequestConfig;\n\n  /**\n   * 요청 객체\n   */\n  request?: Request;\n}\n\n/**\n * 인터셉터 핸들러 타입\n */\nexport type RequestInterceptor = (\n  config: RequestConfig\n) => Promise<RequestConfig> | RequestConfig;\n\nexport type ResponseInterceptor = (\n  response: NextTypeResponse\n) => Promise<NextTypeResponse> | NextTypeResponse;\n\nexport type ErrorInterceptor = (\n  error: FetchError\n) => Promise<NextTypeResponse | FetchError> | NextTypeResponse | FetchError;\n\n/**\n * 쿼리 키 타입\n * 일반적으로 문자열 또는 문자열/숫자/불리언 등으로 구성된 배열입니다.\n */\nexport type QueryKey = string | readonly unknown[];\n\n/**\n * 인터셉터 핸들러와 제거 함수를 함께 반환하는 타입\n */\nexport interface InterceptorHandle {\n  /**\n   * 인터셉터 제거 함수\n   */\n  remove: () => void;\n}\n\n/**\n * 인터셉터 인터페이스\n */\nexport interface Interceptors {\n  request: {\n    use: (interceptor: RequestInterceptor) => InterceptorHandle;\n    eject: (id: number) => void;\n    clearByType: (type: symbol) => void;\n    clear: () => void;\n  };\n  response: {\n    use: (onFulfilled: ResponseInterceptor) => InterceptorHandle;\n    eject: (id: number) => void;\n    clearByType: (type: symbol) => void;\n    clear: () => void;\n  };\n  error: {\n    use: (onRejected: ErrorInterceptor) => InterceptorHandle;\n    eject: (id: number) => void;\n    clearByType: (type: symbol) => void;\n    clear: () => void;\n  };\n}\n\n/**\n * 취소 가능한 요청 타입\n */\nexport interface CancelablePromise<T> extends Promise<T> {\n  /**\n   * 요청 취소 메서드\n   */\n  cancel: () => void;\n\n  /**\n   * 요청 취소 여부 확인\n   */\n  isCanceled: () => boolean;\n}\n\n/**\n * Next Type Fetch 인스턴스 인터페이스\n */\nexport interface NextTypeFetch {\n  /**\n   * 전역 설정\n   */\n  defaults: FetchConfig;\n\n  /**\n   * 인터셉터\n   */\n  interceptors: Interceptors;\n\n  /**\n   * GET 요청\n   */\n  get: <T = unknown>(\n    url: string,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * POST 요청\n   */\n  post: <T = unknown>(\n    url: string,\n    data?: unknown,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * PUT 요청\n   */\n  put: <T = unknown>(\n    url: string,\n    data?: unknown,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * DELETE 요청\n   */\n  delete: <T = unknown>(\n    url: string,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * PATCH 요청\n   */\n  patch: <T = unknown>(\n    url: string,\n    data?: unknown,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * HEAD 요청\n   */\n  head: <T = unknown>(\n    url: string,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * OPTIONS 요청\n   */\n  options: <T = unknown>(\n    url: string,\n    config?: FetchConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n\n  /**\n   * 기본 요청 메서드\n   */\n  request: <T = unknown>(\n    config: RequestConfig\n  ) => CancelablePromise<NextTypeResponse<T>>;\n}\n","import type {\n  ErrorInterceptor,\n  RequestInterceptor,\n  RequestConfig,\n  ResponseInterceptor,\n  FetchError,\n  NextTypeResponse,\n} from \"./types\";\n\n/**\n * 인터셉터 핸들러와 제거 함수를 함께 반환하는 타입\n */\nexport interface InterceptorHandle {\n  /**\n   * 인터셉터 제거 함수\n   */\n  remove: () => void;\n}\n\n/**\n * 인터셉터 유형을 식별하는 심볼 매핑\n * 유니크한 식별자를 통해 인터셉터 그룹 지정 가능\n */\nconst interceptorTypeSymbols = {\n  // 기본 인터셉터 유형\n  default: Symbol(\"default-interceptor\"),\n  // 인증 관련 인터셉터 - 자동 교체 설정 가능\n  auth: Symbol(\"auth-interceptor\"),\n  // 로깅 관련 인터셉터 - 자동 교체 설정 가능\n  logging: Symbol(\"logging-interceptor\"),\n  // 에러 처리 인터셉터 - 자동 교체 설정 가능\n  errorHandler: Symbol(\"error-handler-interceptor\"),\n};\n\n/**\n * 인터셉터 등록 옵션 (내부용)\n * @internal\n */\ninterface InterceptorOptions {\n  /**\n   * 인터셉터 유형 - 같은 유형의 기존 인터셉터를 교체할지 결정\n   */\n  type?: symbol;\n\n  /**\n   * 인터셉터 식별 태그 - 로깅 및 디버깅용\n   */\n  tag?: string;\n}\n\n/**\n * 인터셉터 매니저 클래스\n */\nexport class InterceptorManager<\n  T extends RequestInterceptor | ResponseInterceptor | ErrorInterceptor\n> {\n  private handlers: Array<{\n    id: number;\n    handler: T;\n    type?: symbol;\n    tag?: string;\n  } | null> = [];\n\n  private idCounter = 0;\n\n  /**\n   * 인터셉터 추가\n   * @param handler 인터셉터 핸들러 함수\n   * @param options 인터셉터 등록 옵션\n   * @returns 제거 함수가 포함된 핸들 객체\n   * @note 여러 번 use를 호출하면 등록한 모든 인터셉터가 순차적으로 실행됩니다. (Axios 등과 동일)\n   */\n  use(handler: T, options?: InterceptorOptions): InterceptorHandle {\n    const id = this.idCounter++;\n    const type = options?.type || interceptorTypeSymbols.default;\n    const tag = options?.tag || \"unnamed-interceptor\";\n\n    this.handlers.push({\n      id,\n      handler,\n      type,\n      tag,\n    });\n\n    return {\n      remove: () => this.eject(id),\n    };\n  }\n\n  /**\n   * 인터셉터 제거\n   * @param id 제거할 인터셉터 ID\n   */\n  eject(id: number): void {\n    const index = this.handlers.findIndex((h) => h !== null && h.id === id);\n    if (index !== -1) {\n      this.handlers[index] = null;\n    }\n  }\n\n  /**\n   * 특정 유형의 인터셉터 모두 제거\n   * @param type 제거할 인터셉터 유형\n   */\n  ejectByType(type: symbol): void {\n    this.handlers.forEach((item, index) => {\n      if (item !== null && item.type === type) {\n        this.handlers[index] = null;\n      }\n    });\n  }\n\n  /**\n   * 모든 인터셉터 제거\n   */\n  clear(): void {\n    this.handlers = [];\n  }\n\n  /**\n   * 모든 인터셉터 실행\n   * @param value 인터셉터에 전달할 값\n   * @returns 처리된 값\n   */\n  async forEach<V>(value: V): Promise<V> {\n    let result = value;\n\n    for (const handler of this.handlers) {\n      if (handler !== null) {\n        // 핸들러 실행 - T와 V 타입이 항상 일치하지 않으므로 타입 검사 우회\n        result = (await (\n          handler.handler as (arg: unknown) => unknown | Promise<unknown>\n        )(result)) as V;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 디버깅 용도로 현재 등록된 인터셉터 정보 반환\n   */\n  getRegisteredInterceptors() {\n    return this.handlers\n      .filter((h) => h !== null)\n      .map((h) => ({\n        id: h?.id,\n        tag: h?.tag || \"(unnamed)\",\n        type: h?.type?.description || \"default\",\n      }));\n  }\n}\n\n/**\n * 요청 인터셉터 매니저 클래스\n */\nexport class RequestInterceptorManager {\n  private manager = new InterceptorManager<RequestInterceptor>();\n\n  /**\n   * 요청 인터셉터 추가\n   * @param interceptor 요청 인터셉터 함수\n   * @param type 인터셉터 유형 - 기본값은 auth 타입 (자동 교체됨)\n   * @returns 제거 함수가 포함된 핸들 객체\n   */\n  use(\n    interceptor: RequestInterceptor,\n    type = interceptorTypeSymbols.auth\n  ): InterceptorHandle {\n    return this.manager.use(interceptor, { type, tag: \"request-interceptor\" });\n  }\n\n  /**\n   * 모든 요청 인터셉터 제거\n   */\n  clear(): void {\n    this.manager.clear();\n  }\n\n  /**\n   * 특정 유형의 인터셉터 모두 제거\n   * @param type 제거할 인터셉터 유형\n   */\n  clearByType(type: symbol): void {\n    this.manager.ejectByType(type);\n  }\n\n  /**\n   * 요청 인터셉터 실행\n   */\n  async run(config: RequestConfig): Promise<RequestConfig> {\n    return this.manager.forEach<RequestConfig>(config);\n  }\n\n  /**\n   * 디버깅 용도로 현재 등록된 인터셉터 정보 반환\n   */\n  getRegisteredInterceptors() {\n    return this.manager.getRegisteredInterceptors();\n  }\n}\n\n/**\n * 응답 인터셉터 매니저 클래스\n */\nexport class ResponseInterceptorManager {\n  private manager = new InterceptorManager<ResponseInterceptor>();\n\n  /**\n   * 응답 인터셉터 추가\n   * @param interceptor 응답 인터셉터 함수\n   * @param type 인터셉터 유형 - 기본값은 auth 타입 (자동 교체됨)\n   * @returns 제거 함수가 포함된 핸들 객체\n   */\n  use(\n    interceptor: ResponseInterceptor,\n    type = interceptorTypeSymbols.auth\n  ): InterceptorHandle {\n    return this.manager.use(interceptor, { type, tag: \"response-interceptor\" });\n  }\n\n  /**\n   * 모든 응답 인터셉터 제거\n   */\n  clear(): void {\n    this.manager.clear();\n  }\n\n  /**\n   * 특정 유형의 인터셉터 제거\n   * @param type 제거할 인터셉터 유형\n   */\n  clearByType(type: symbol): void {\n    this.manager.ejectByType(type);\n  }\n\n  /**\n   * 응답 인터셉터 실행 (내부용)\n   */\n  async run<T>(response: NextTypeResponse<T>): Promise<NextTypeResponse<T>> {\n    return this.manager.forEach<NextTypeResponse<T>>(response);\n  }\n\n  /**\n   * 디버깅 용도로 현재 등록된 인터셉터 정보 반환\n   */\n  getRegisteredInterceptors() {\n    return this.manager.getRegisteredInterceptors();\n  }\n}\n\n/**\n * 에러 인터셉터 매니저 클래스\n */\nexport class ErrorInterceptorManager {\n  private manager = new InterceptorManager<ErrorInterceptor>();\n\n  /**\n   * 에러 인터셉터 추가\n   * @param interceptor 에러 인터셉터 함수\n   * @param type 인터셉터 유형 - 기본값은 errorHandler 타입 (자동 교체됨)\n   * @returns 제거 함수가 포함된 핸들 객체\n   */\n  use(\n    interceptor: ErrorInterceptor,\n    type = interceptorTypeSymbols.errorHandler\n  ): InterceptorHandle {\n    return this.manager.use(interceptor, { type, tag: \"error-interceptor\" });\n  }\n\n  /**\n   * 모든 에러 인터셉터 제거\n   */\n  clear(): void {\n    this.manager.clear();\n  }\n\n  /**\n   * 특정 유형의 인터셉터 제거\n   * @param type 제거할 인터셉터 유형\n   */\n  clearByType(type: symbol): void {\n    this.manager.ejectByType(type);\n  }\n\n  /**\n   * 에러 인터셉터 실행 (내부용)\n   */\n  async run(\n    error: FetchError\n  ): Promise<NextTypeResponse<unknown> | FetchError> {\n    return this.manager.forEach<FetchError>(error);\n  }\n\n  /**\n   * 디버깅 용도로 현재 등록된 인터셉터 정보 반환\n   */\n  getRegisteredInterceptors() {\n    return this.manager.getRegisteredInterceptors();\n  }\n}\n\n/**\n * 요청/응답 인터셉터 생성\n */\nexport function createInterceptors() {\n  const requestInterceptors = new RequestInterceptorManager();\n  const responseInterceptors = new ResponseInterceptorManager();\n  const errorInterceptors = new ErrorInterceptorManager();\n\n  return {\n    request: {\n      /**\n       * 요청 인터셉터 추가 - 자동으로 같은 유형의 이전 인터셉터 교체\n       * @param interceptor 요청 처리 함수\n       * @returns 제거 함수가 포함된 핸들\n       * @example\n       * ```typescript\n       * // 인터셉터 추가 (auth 유형 기본값)\n       * const authInterceptor = api.interceptors.request.use(config => {\n       *   config.headers = config.headers || {};\n       *   config.headers['Authorization'] = `Bearer ${getToken()}`;\n       *   return config;\n       * });\n       *\n       * // 다른 인터셉터 추가 시 이전 auth 유형 인터셉터는 자동 제거됨\n       * api.interceptors.request.use(config => {\n       *   config.headers = config.headers || {};\n       *   config.headers['Authorization'] = `Bearer ${getNewToken()}`;\n       *   return config;\n       * });\n       * ```\n       */\n      use: (interceptor: RequestInterceptor) =>\n        requestInterceptors.use(interceptor),\n\n      /**\n       * 인터셉터 제거 (하위 호환성)\n       * @deprecated InterceptorHandle.remove() 사용 권장\n       */\n      eject: (id: number) => {\n        console.warn(\n          \"eject() 메서드는 사용되지 않습니다. use()가 반환하는 InterceptorHandle.remove()를 사용하세요.\"\n        );\n      },\n\n      /**\n       * 모든 요청 인터셉터 제거\n       * @example\n       * ```typescript\n       * // 모든 요청 인터셉터 제거\n       * api.interceptors.request.clear();\n       * ```\n       */\n      clear: () => requestInterceptors.clear(),\n\n      /**\n       * 특정 유형의 인터셉터 제거\n       * @param type 제거할 인터셉터 유형\n       * @example\n       * ```typescript\n       * // 인증 관련 인터셉터만 제거\n       * api.interceptors.request.clearByType(interceptorTypes.auth);\n       * ```\n       */\n      clearByType: (type: symbol) => requestInterceptors.clearByType(type),\n\n      /**\n       * 요청 인터셉터 실행 (내부용)\n       */\n      run: requestInterceptors.run.bind(requestInterceptors),\n\n      /**\n       * 디버깅 용도로 현재 등록된 인터셉터 정보 조회\n       */\n      getRegistered: () => requestInterceptors.getRegisteredInterceptors(),\n    },\n    response: {\n      /**\n       * 응답 인터셉터 추가 - 자동으로 같은 유형의 이전 인터셉터 교체\n       * @param onFulfilled 성공 응답 처리 함수\n       * @returns 제거 함수가 포함된 핸들\n       */\n      use: (onFulfilled: ResponseInterceptor) =>\n        responseInterceptors.use(onFulfilled),\n\n      /**\n       * 인터셉터 제거 (하위 호환성)\n       * @deprecated InterceptorHandle.remove() 사용 권장\n       */\n      eject: (id: number) => {\n        console.warn(\n          \"eject() 메서드는 사용되지 않습니다. use()가 반환하는 InterceptorHandle.remove()를 사용하세요.\"\n        );\n      },\n\n      /**\n       * 모든 응답 인터셉터 제거\n       */\n      clear: () => responseInterceptors.clear(),\n\n      /**\n       * 특정 유형의 인터셉터 제거\n       * @param type 제거할 인터셉터 유형\n       */\n      clearByType: (type: symbol) => responseInterceptors.clearByType(type),\n\n      /**\n       * 응답 인터셉터 실행 (내부용)\n       */\n      run: responseInterceptors.run.bind(responseInterceptors),\n\n      /**\n       * 디버깅 용도로 현재 등록된 인터셉터 정보 조회\n       */\n      getRegistered: () => responseInterceptors.getRegisteredInterceptors(),\n    },\n    error: {\n      /**\n       * 에러 인터셉터 추가 - 자동으로 같은 유형의 이전 인터셉터 교체\n       * @param onRejected 에러 처리 함수\n       * @returns 제거 함수가 포함된 핸들\n       */\n      use: (onRejected: ErrorInterceptor) => errorInterceptors.use(onRejected),\n\n      /**\n       * 인터셉터 제거 (하위 호환성)\n       * @deprecated InterceptorHandle.remove() 사용 권장\n       */\n      eject: (id: number) => {\n        console.warn(\n          \"eject() 메서드는 사용되지 않습니다. use()가 반환하는 InterceptorHandle.remove()를 사용하세요.\"\n        );\n      },\n\n      /**\n       * 모든 에러 인터셉터 제거\n       */\n      clear: () => errorInterceptors.clear(),\n\n      /**\n       * 특정 유형의 인터셉터 제거\n       * @param type 제거할 인터셉터 유형\n       */\n      clearByType: (type: symbol) => errorInterceptors.clearByType(type),\n\n      /**\n       * 에러 인터셉터 실행 (내부용)\n       */\n      run: errorInterceptors.run.bind(errorInterceptors),\n\n      /**\n       * 디버깅 용도로 현재 등록된 인터셉터 정보 조회\n       */\n      getRegistered: () => errorInterceptors.getRegisteredInterceptors(),\n    },\n  };\n}\n\n// 인터셉터 유형 타입 익스포트\nexport const interceptorTypes = interceptorTypeSymbols;\n","import { isEmpty } from \"es-toolkit/compat\";\nimport { compact, trim, isNil, pickBy } from \"es-toolkit\";\n\n/**\n * URL에 쿼리 파라미터를 추가합니다.\n * 순수한 문자열 처리로 구현하여 안전하고 예측 가능합니다.\n * @param url 기본 URL (절대 URL 또는 상대 경로)\n * @param params 쿼리 파라미터 객체\n * @returns 쿼리 파라미터가 추가된 URL\n */\nexport function appendQueryParams(\n  url: string,\n  params?: Record<string, string | number | boolean | undefined | null>\n): string {\n  // URL 정리 및 빈 파라미터 체크\n  const cleanUrl = trim(url);\n  if (!params || isEmpty(params)) return cleanUrl;\n\n  // 유효한 파라미터만 필터링\n  const validParams = pickBy(params, (value) => !isNil(value));\n\n  if (isEmpty(validParams)) return cleanUrl;\n\n  // URL을 파트별로 분리 (fragment 먼저 분리)\n  const [baseUrl, fragment] = cleanUrl.split(\"#\");\n  const [path, existingQuery] = baseUrl.split(\"?\");\n\n  // 기존 쿼리 파라미터 파싱\n  const existingParams = new URLSearchParams(existingQuery || \"\");\n\n  // 새 파라미터 추가 (덮어쓰기 방식으로 중복 방지)\n  Object.entries(validParams).forEach(([key, value]) => {\n    existingParams.set(key, String(value));\n  });\n\n  // URL 파트들을 배열로 구성하고 compact로 빈 값 제거\n  const queryString = existingParams.toString();\n  const urlParts = compact([\n    path,\n    queryString ? `?${queryString}` : null,\n    fragment ? `#${fragment}` : null,\n  ]);\n\n  return urlParts.join(\"\");\n}\n\n/**\n * 베이스 URL과 상대 경로를 합칩니다.\n * @param baseURL 베이스 URL\n * @param url 상대 경로\n * @returns 완전한 URL\n */\nexport function combineURLs(baseURL?: string, url?: string): string {\n  // 입력값 정리\n  const cleanBaseURL = baseURL ? trim(baseURL) : \"\";\n  const cleanUrl = url ? trim(url) : \"\";\n\n  if (!cleanBaseURL) return cleanUrl;\n  if (!cleanUrl) return cleanBaseURL;\n\n  const baseEndsWithSlash = cleanBaseURL.endsWith(\"/\");\n  const urlStartsWithSlash = cleanUrl.startsWith(\"/\");\n\n  if (baseEndsWithSlash && urlStartsWithSlash) {\n    return cleanBaseURL + cleanUrl.substring(1);\n  }\n\n  if (!baseEndsWithSlash && !urlStartsWithSlash) {\n    return `${cleanBaseURL}/${cleanUrl}`;\n  }\n\n  return cleanBaseURL + cleanUrl;\n}\n","import type { FetchConfig, RequestConfig } from \"../types\";\n\n/**\n * 요청 설정을 병합합니다.\n * @param defaultConfig 기본 설정\n * @param requestConfig 요청별 설정\n * @returns 병합된 설정\n */\nexport function mergeConfigs(\n  defaultConfig: FetchConfig = {},\n  requestConfig: RequestConfig = {}\n): RequestConfig {\n  // RequestConfig 타입으로 캐스팅\n  const mergedConfig = {\n    ...defaultConfig,\n    ...requestConfig,\n  } as RequestConfig;\n\n  // 헤더 병합\n  mergedConfig.headers = {\n    ...defaultConfig.headers,\n    ...requestConfig.headers,\n  };\n\n  // 쿼리 파라미터 병합\n  mergedConfig.params = {\n    ...defaultConfig.params,\n    ...requestConfig.params,\n  };\n\n  // next 옵션 병합\n  if (defaultConfig.next || requestConfig.next) {\n    mergedConfig.next = {\n      ...defaultConfig.next,\n      ...requestConfig.next,\n    };\n  }\n\n  return mergedConfig;\n}\n","import { isNil, isString } from \"es-toolkit\";\n\n/**\n * 객체를 JSON 문자열로 변환합니다.\n * @param data 객체\n * @returns JSON 문자열\n */\nexport function stringifyData(data: unknown): string | null {\n  if (isNil(data)) return null;\n  if (isString(data)) return data;\n\n  try {\n    return JSON.stringify(data);\n  } catch (e) {\n    console.error(\"Failed to stringify data:\", e);\n    return null;\n  }\n}\n","/**\n * 타임아웃 프로미스를 생성합니다.\n * @param ms 타임아웃 시간 (ms)\n * @returns Promise와 AbortController\n */\nexport function createTimeoutPromise(ms?: number): { promise: Promise<never>; controller: AbortController } | null {\n\tif (!ms || ms <= 0) return null;\n\n\tconst controller = new AbortController();\n\n\tconst promise = new Promise<never>((_, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tcontroller.abort();\n\t\t\treject(new Error(`Request timeout of ${ms}ms exceeded`));\n\t\t}, ms);\n\t});\n\n\treturn { promise, controller };\n}\n","import {\n  FetchError,\n  type NextTypeResponse,\n  type RequestConfig,\n} from \"../types\";\n\n/**\n * 응답 객체에서 데이터를 추출합니다.\n * @param response NextTypeResponse 객체\n * @returns 데이터\n */\nexport function unwrap<T>(response: NextTypeResponse<T>): T {\n  return response.data;\n}\n\n/**\n * 응답 객체에서 상태 코드를 추출합니다.\n * @param response NextTypeResponse 객체\n * @returns HTTP 상태 코드\n */\nexport function getStatus<T>(response: NextTypeResponse<T>): number {\n  return response.status;\n}\n\n/**\n * 응답 객체에서 헤더를 추출합니다.\n * @param response NextTypeResponse 객체\n * @returns 응답 헤더\n */\nexport function getHeaders<T>(response: NextTypeResponse<T>): Headers {\n  return response.headers;\n}\n\n/**\n * 응답 객체가 특정 상태 코드인지 확인합니다.\n * @param response NextTypeResponse 객체\n * @param code HTTP 상태 코드\n * @returns 상태 코드 일치 여부\n */\nexport function hasStatus<T>(\n  response: NextTypeResponse<T>,\n  code: number\n): boolean {\n  return response.status === code;\n}\n\n/**\n * HTTP 에러를 생성합니다.\n * @param message 에러 메시지\n * @param config 요청 설정\n * @param code 에러 코드\n * @param response 응답 객체 (선택적)\n * @param data 응답 데이터 (선택적)\n * @returns FetchError 인스턴스\n */\nexport function createError(\n  message: string,\n  config: RequestConfig,\n  code = \"ERR_UNKNOWN\",\n  response?: Response,\n  data?: unknown\n): FetchError {\n  return new FetchError(message, config, code, undefined, response, data);\n}\n","import { isFunction } from \"es-toolkit\";\nimport { FetchError, type NextTypeResponse } from \"../types\";\n\n/**\n * 객체가 FetchError인지 확인합니다.\n * @param error 검사할 객체\n * @returns FetchError 여부\n *\n * @example\n * try {\n *   const response = await api.get('/api/users');\n *   // 성공 처리\n * } catch (error) {\n *   if (isFetchError(error)) {\n *     console.error('API 에러:', error.message, error.code);\n *   }\n * }\n */\nexport function isFetchError(error: unknown): error is FetchError {\n  return error instanceof FetchError;\n}\n\n/**\n * 에러가 특정 에러 코드를 가지고 있는지 확인합니다.\n * @param error 검사할 에러\n * @param code 확인할 에러 코드\n * @returns 일치 여부\n *\n * @example\n * if (hasErrorCode(error, 'ERR_CANCELED')) {\n *   console.log('요청이 취소되었습니다.');\n * }\n */\nexport function hasErrorCode(error: unknown, code: string): boolean {\n  return isFetchError(error) && error.code === code;\n}\n\n/**\n * FetchError 에러 코드 상수\n */\nexport const ErrorCode = {\n  /** 네트워크 에러 */\n  NETWORK: \"ERR_NETWORK\",\n  /** 요청 취소됨 */\n  CANCELED: \"ERR_CANCELED\",\n  /** 요청 타임아웃 */\n  TIMEOUT: \"ERR_TIMEOUT\",\n  /** 서버 응답 에러 (4xx, 5xx) */\n  BAD_RESPONSE: \"ERR_BAD_RESPONSE\",\n  /** 데이터 검증 실패 */\n  VALIDATION: \"ERR_VALIDATION\",\n  /** 알 수 없는 검증 오류 */\n  VALIDATION_UNKNOWN: \"ERR_VALIDATION_UNKNOWN\",\n  /** 알 수 없는 에러 */\n  UNKNOWN: \"ERR_UNKNOWN\",\n} as const;\n\n/**\n * FetchError 에러 코드 타입\n */\nexport type ErrorCodeType = (typeof ErrorCode)[keyof typeof ErrorCode];\n\n/**\n * 에러를 처리하는 유틸리티 함수\n * @param error 처리할 에러\n * @param handlers 에러 코드별 핸들러\n * @returns 처리 결과 (핸들러 함수의 반환값)\n *\n * @example\n * try {\n *   const response = await api.get('/api/users');\n *   return response.data;\n * } catch (error) {\n *   return handleFetchError(error, {\n *     [ErrorCode.NETWORK]: () => '네트워크 연결을 확인해주세요.',\n *     [ErrorCode.TIMEOUT]: () => '요청 시간이 초과되었습니다.',\n *     [ErrorCode.CANCELED]: () => '요청이 취소되었습니다.',\n *     default: (err) => `오류가 발생했습니다: ${err.message}`,\n *   });\n * }\n */\nexport function handleFetchError<T>(\n  error: unknown,\n  handlers: {\n    [code in ErrorCodeType]?: (error: FetchError) => T;\n  } & {\n    default?: (error: unknown) => T;\n  }\n): T {\n  if (isFetchError(error) && error.code) {\n    const errorCode = error.code as ErrorCodeType;\n    const handler = handlers[errorCode];\n    if (handler) {\n      return handler(error);\n    }\n  }\n\n  if (handlers.default) {\n    return handlers.default(error);\n  }\n\n  // 핸들러가 없으면 에러를 다시 throw\n  throw error;\n}\n\n/**\n * HTTP 상태 코드에 따라 에러를 처리합니다.\n * @param error 처리할 에러\n * @param handlers HTTP 상태 코드별 핸들러\n * @returns 처리 결과 (핸들러 함수의 반환값)\n *\n * @example\n * try {\n *   const response = await api.get('/api/users');\n *   return response.data;\n * } catch (error) {\n *   return handleHttpError(error, {\n *     400: () => '잘못된 요청입니다.',\n *     401: () => '인증이 필요합니다.',\n *     404: () => '리소스를 찾을 수 없습니다.',\n *     default: () => '서버 오류가 발생했습니다.',\n *   });\n * }\n */\nexport function handleHttpError<T>(\n  error: unknown,\n  handlers: {\n    [status: number]: (error: FetchError) => T;\n    default?: (error: unknown) => T;\n  }\n): T {\n  if (\n    isFetchError(error) &&\n    error.response &&\n    isFunction(handlers[error.response.status])\n  ) {\n    return handlers[error.response.status](error);\n  }\n\n  if (handlers.default) {\n    return handlers.default(error);\n  }\n\n  // 핸들러가 없으면 에러를 다시 throw\n  throw error;\n}\n\n/**\n * 에러를 NextTypeResponse 형태로 변환합니다.\n * 인터셉터에서 에러를 응답으로 변환할 때 유용하게 사용할 수 있습니다.\n * @param error 변환할 에러\n * @param data 응답 데이터\n * @returns NextTypeResponse 객체\n *\n * @example\n * // 인터셉터에서 사용 예시\n * api.interceptors.error.use((error) => {\n *   if (hasErrorCode(error, ErrorCode.VALIDATION)) {\n *     return errorToResponse(error, {\n *       validationError: true,\n *       fields: error.response?.data\n *     });\n *   }\n *   throw error;\n * });\n */\nexport function errorToResponse<T>(\n  error: FetchError,\n  data: T\n): NextTypeResponse<T> {\n  return {\n    data,\n    status: error.response?.status || 500,\n    statusText: error.response?.statusText || error.message,\n    headers: error.response?.headers || new Headers(),\n    config: error.config,\n    request: error.request,\n  };\n}\n","import { z } from \"zod/v4\";\nimport type {\n  NextTypeResponse,\n  CancelablePromise,\n  FetchConfig,\n  RequestConfig,\n} from \"../types\";\nimport { ContentType, FetchError, ResponseType } from \"../types\";\nimport {\n  appendQueryParams,\n  combineURLs,\n  createTimeoutPromise,\n  stringifyData,\n} from \"../utils\";\n\ninterface InterceptorsType {\n  request: {\n    run: (config: RequestConfig) => Promise<RequestConfig>;\n  };\n  response: {\n    run: <T>(response: NextTypeResponse<T>) => Promise<NextTypeResponse<T>>;\n  };\n  error: {\n    run: (error: FetchError) => Promise<NextTypeResponse<unknown> | FetchError>;\n  };\n}\n\n/**\n * 특정 콘텐츠 타입에 맞게 요청 본문 데이터를 준비합니다.\n */\nfunction prepareRequestBody(\n  data: unknown,\n  contentType: string,\n  headers: Record<string, string>\n): { body: BodyInit | null; headers: Record<string, string> } {\n  const headersCopy = { ...headers };\n\n  // FormData, URLSearchParams, Blob은 직접 전달\n  if (\n    data instanceof FormData ||\n    data instanceof URLSearchParams ||\n    data instanceof Blob\n  ) {\n    // FormData의 경우 Content-Type 헤더를 설정하지 않도록 함\n    if (\n      data instanceof FormData &&\n      (contentType === \"\" || contentType === ContentType.MULTIPART)\n    ) {\n      const { \"Content-Type\": _, ...remainingHeaders } = headersCopy;\n      return { body: data, headers: remainingHeaders };\n    }\n    return { body: data, headers: headersCopy };\n  }\n\n  // 문자열로 변환된 컨텐츠 타입\n  const contentTypeStr = String(contentType);\n\n  // 컨텐츠 타입에 따른 처리\n  switch (true) {\n    // JSON 컨텐츠 타입\n    case contentTypeStr === ContentType.JSON ||\n      contentTypeStr.includes(\"application/json\"):\n      return {\n        body: stringifyData(data),\n        headers: { ...headersCopy, \"Content-Type\": ContentType.JSON },\n      };\n\n    // URL 인코딩된 폼 데이터\n    case contentTypeStr === ContentType.FORM ||\n      contentTypeStr.includes(\"application/x-www-form-urlencoded\"): {\n      let body: BodyInit;\n\n      if (\n        typeof data === \"object\" &&\n        data !== null &&\n        !(data instanceof URLSearchParams)\n      ) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(\n          data as Record<string, string>\n        )) {\n          if (value !== undefined && value !== null) {\n            params.append(key, String(value));\n          }\n        }\n        body = params;\n      } else if (data instanceof URLSearchParams) {\n        body = data;\n      } else {\n        // 문자열이나 null이면 그대로 사용\n        body = String(data || \"\");\n      }\n\n      return {\n        body,\n        headers: { ...headersCopy, \"Content-Type\": ContentType.FORM },\n      };\n    }\n\n    // XML 컨텐츠 타입\n    case contentTypeStr === ContentType.XML ||\n      contentTypeStr.includes(\"application/xml\"):\n      return {\n        body: typeof data === \"string\" ? data : String(data),\n        headers: { ...headersCopy, \"Content-Type\": ContentType.XML },\n      };\n\n    // HTML 컨텐츠 타입\n    case contentTypeStr === ContentType.HTML ||\n      contentTypeStr.includes(\"text/html\"):\n      return {\n        body: typeof data === \"string\" ? data : String(data),\n        headers: { ...headersCopy, \"Content-Type\": ContentType.HTML },\n      };\n\n    // 일반 텍스트\n    case contentTypeStr === ContentType.TEXT ||\n      contentTypeStr.includes(\"text/plain\"):\n      return {\n        body: typeof data === \"string\" ? data : String(data),\n        headers: { ...headersCopy, \"Content-Type\": ContentType.TEXT },\n      };\n\n    // 바이너리 데이터\n    case contentTypeStr === ContentType.BLOB ||\n      contentTypeStr.includes(\"application/octet-stream\"): {\n      const body =\n        data instanceof Blob || data instanceof ArrayBuffer\n          ? data\n          : typeof data === \"string\"\n          ? data\n          : String(data);\n\n      return {\n        body,\n        headers: { ...headersCopy, \"Content-Type\": ContentType.BLOB },\n      };\n    }\n\n    // 기타 컨텐츠 타입\n    default: {\n      const body =\n        typeof data === \"object\" ? stringifyData(data) : String(data);\n\n      return {\n        body,\n        headers: { ...headersCopy, \"Content-Type\": contentTypeStr },\n      };\n    }\n  }\n}\n\n/**\n * 응답 타입에 따라 응답 데이터를 처리합니다.\n */\nasync function processResponseByType(\n  response: Response,\n  responseType: ResponseType,\n  contentTypeHeader: string,\n  parseJSON = true\n): Promise<unknown> {\n  // 응답 타입 결정\n  const effectiveResponseType =\n    responseType ||\n    (contentTypeHeader.includes(\"application/json\") && parseJSON !== false\n      ? ResponseType.JSON\n      : ResponseType.TEXT);\n\n  // HEAD나 OPTIONS 요청과 같이 응답 본문이 없는 경우를 위한 안전 검사\n  const isEmptyResponse =\n    response.status === 204 || response.headers.get(\"content-length\") === \"0\";\n\n  // 응답 메서드 안전 검사 함수\n  const safeCall = async <T>(\n    method: \"json\" | \"text\" | \"blob\" | \"arrayBuffer\",\n    fallback: T\n  ): Promise<T> => {\n    if (!response[method] || typeof response[method] !== \"function\") {\n      // 모킹 환경 감지: 테스트 시 response는 모킹된 객체일 수 있음\n      // 테스트에서는 모킹된 응답 객체를 그대로 사용\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"test\") {\n        // 테스트 환경에서 mocking된 객체라면 해당 메서드를 직접 호출\n        try {\n          if (response[method] && typeof response[method] === \"function\") {\n            // 타입 단언을 사용하여 타입 오류 해결\n            return await (response[method] as () => Promise<T>)();\n          }\n        } catch (e) {\n          // 테스트 환경에서 오류 발생 시 fallback 반환\n        }\n      }\n      return fallback;\n    }\n\n    try {\n      // 타입 단언을 사용하여 타입 오류 해결\n      return await (response[method] as () => Promise<T>)();\n    } catch (e) {\n      console.warn(`Failed to process response with ${method}:`, e);\n      return fallback;\n    }\n  };\n\n  switch (effectiveResponseType) {\n    case ResponseType.JSON:\n      // 빈 응답 본문이면 빈 객체 반환\n      if (isEmptyResponse) {\n        return {};\n      }\n\n      try {\n        return await response.json();\n      } catch (e) {\n        // JSON 파싱 실패 시 텍스트로 대체\n        return await safeCall(\"text\", \"\");\n      }\n\n    case ResponseType.BLOB:\n      if (isEmptyResponse) {\n        return new Blob();\n      }\n      return await safeCall(\"blob\", new Blob());\n\n    case ResponseType.ARRAY_BUFFER:\n      if (isEmptyResponse) {\n        return new ArrayBuffer(0);\n      }\n      return await safeCall(\"arrayBuffer\", new ArrayBuffer(0));\n\n    case ResponseType.RAW:\n      // Response 객체 자체를 반환\n      return response;\n\n    default:\n      // 기본값은 텍스트\n      if (isEmptyResponse) {\n        return \"\";\n      }\n      return await safeCall(\"text\", \"\");\n  }\n}\n\n/**\n * 요청 함수 생성\n * @param defaultConfig 기본 설정\n * @param interceptors 인터셉터\n * @returns 요청 함수\n */\nexport function createRequestFunction(\n  defaultConfig: FetchConfig,\n  interceptors: InterceptorsType\n) {\n  /**\n   * 기본 요청 함수\n   */\n  function request<T>(\n    config: RequestConfig\n  ): CancelablePromise<NextTypeResponse<T>> {\n    // 취소 상태 관리\n    let isCanceled = false;\n    let abortController = new AbortController();\n\n    // 취소 메서드\n    const cancel = () => {\n      isCanceled = true;\n      abortController.abort();\n    };\n\n    // 최대 재시도 횟수 및 설정 준비\n    let maxRetries = 0;\n    let retryStatusCodes: number[] = [];\n    let retryBackoff: (retryCount: number) => number = (count) =>\n      Math.min(1000 * 2 ** (count - 1), 10000);\n\n    if (typeof config.retry === \"number\") {\n      maxRetries = config.retry;\n    } else if (config.retry && typeof config.retry === \"object\") {\n      maxRetries = config.retry.limit;\n      retryStatusCodes = config.retry.statusCodes || [];\n\n      if (config.retry.backoff === \"linear\") {\n        retryBackoff = (count) => 1000 * count;\n      } else if (config.retry.backoff === \"exponential\") {\n        retryBackoff = (count) => Math.min(1000 * 2 ** (count - 1), 10000);\n      } else if (typeof config.retry.backoff === \"function\") {\n        retryBackoff = config.retry.backoff;\n      }\n    }\n\n    let retryCount = 0;\n    let authRetryCount = config._authRetryCount || 0;\n    const authRetryOption = config.authRetry || defaultConfig.authRetry;\n\n    // 사용자 정의 AbortSignal이 있는 경우 즉시 확인\n    if (config.signal) {\n      if (config.signal.aborted) {\n        // 이미 취소된 경우 즉시 취소 상태 설정\n        isCanceled = true;\n        abortController.abort();\n      } else {\n        // 이벤트 리스너 연결\n        config.signal.addEventListener(\"abort\", () => {\n          isCanceled = true;\n          abortController.abort();\n        });\n      }\n    }\n\n    // 재시도 함수\n    async function performRequest(): Promise<NextTypeResponse<T>> {\n      try {\n        // 이미 취소된 경우 에러 반환\n        if (isCanceled) {\n          throw new FetchError(\"Request was canceled\", config, \"ERR_CANCELED\");\n        }\n\n        // 스키마 추출 (요청 인터셉터 전에 제거)\n        const { schema, ...restConfig } = config;\n\n        // 요청 인터셉터 실행\n        const requestConfig = await interceptors.request.run(restConfig);\n\n        // URL 조합\n        const url = combineURLs(requestConfig.baseURL, requestConfig.url);\n\n        // URL에 쿼리 파라미터 추가\n        const fullUrl = appendQueryParams(url, requestConfig.params);\n\n        // 타임아웃 설정\n        const timeoutResult = createTimeoutPromise(requestConfig.timeout);\n\n        // 사용자 정의 AbortSignal이 있으면 이벤트 리스너 연결\n        if (requestConfig.signal && !isCanceled) {\n          if (requestConfig.signal.aborted) {\n            isCanceled = true;\n            abortController.abort();\n            // 이미 취소된 경우 즉시 취소 에러 던짐\n            throw new FetchError(\n              \"Request was canceled\",\n              config,\n              \"ERR_CANCELED\"\n            );\n          }\n        }\n\n        // 요청 옵션 구성 - fetch API 관련 속성만 추출\n        const {\n          method = \"GET\",\n          headers = {},\n          cache,\n          credentials,\n          integrity,\n          keepalive,\n          mode,\n          redirect,\n          referrer,\n          referrerPolicy,\n          next,\n          signal, // 여기서는 사용하지 않음 (위에서 처리)\n          contentType, // 새로 추가된 컨텐츠 타입 옵션\n          responseType, // 새로 추가된 응답 타입 옵션\n          data,\n        } = requestConfig;\n\n        // RequestInit 객체 생성 - fetch API 관련 속성만 포함\n        const requestInit: RequestInit = {\n          method,\n          headers: headers as Record<string, string>,\n          signal: abortController.signal, // 항상 내부 AbortController 사용\n          cache,\n          credentials,\n          integrity,\n          keepalive,\n          mode,\n          redirect,\n          referrer,\n          referrerPolicy,\n        };\n\n        // Next.js의 next 옵션이 있으면 RequestInit에 추가\n        if (next) {\n          // TypeScript 정의에는 next가 없으므로 타입 단언 사용\n          // DOM 타입에는 next 속성이 없지만 Next.js는 이를 지원함\n          (requestInit as RequestInit & { next?: typeof next }).next = next;\n        }\n\n        // data가 있으면 요청 본문에 추가\n        if (data !== undefined) {\n          // Content-Type 결정 로직\n          const effectiveContentType =\n            contentType ||\n            (headers as Record<string, string>)[\"Content-Type\"] ||\n            \"\";\n\n          // 컨텐츠 타입이 제공되지 않았고 객체인 경우 기본값은 JSON\n          if (\n            effectiveContentType === \"\" &&\n            typeof data === \"object\" &&\n            data !== null &&\n            !(data instanceof FormData) &&\n            !(data instanceof URLSearchParams) &&\n            !(data instanceof Blob)\n          ) {\n            // 기본적으로 JSON으로 처리\n            requestInit.body = stringifyData(data);\n            requestInit.headers = {\n              ...(headers as Record<string, string>),\n              \"Content-Type\": ContentType.JSON,\n            };\n          } else {\n            // 컨텐츠 타입에 따라 요청 본문 데이터 처리\n            const { body, headers: processedHeaders } = prepareRequestBody(\n              data,\n              effectiveContentType,\n              headers as Record<string, string>\n            );\n\n            requestInit.body = body;\n            requestInit.headers = processedHeaders;\n          }\n        }\n\n        // 이미 취소된 경우 fetch를 호출하지 않음\n        if (isCanceled) {\n          throw new FetchError(\"Request was canceled\", config, \"ERR_CANCELED\");\n        }\n\n        // 실제 fetch 요청 실행\n        const fetchPromise = fetch(fullUrl, requestInit);\n\n        // 타임아웃이 있으면 타임아웃 Promise와 함께 race\n        const response = await (timeoutResult\n          ? Promise.race([fetchPromise, timeoutResult.promise])\n          : fetchPromise);\n\n        // 응답 처리\n        const contentTypeHeader = response.headers.get(\"content-type\") || \"\";\n\n        // 응답 타입에 따라 응답 데이터 처리\n        const responseData = await processResponseByType(\n          response,\n          responseType as ResponseType,\n          contentTypeHeader,\n          requestConfig.parseJSON\n        );\n\n        // HTTP 에러 검사\n        if (!response.ok) {\n          // HTTP 에러 생성 및 throw\n          const fetchError = new FetchError(\n            response.statusText || `HTTP error ${response.status}`,\n            requestConfig,\n            \"ERR_BAD_RESPONSE\",\n            requestInit as unknown as Request,\n            response,\n            responseData\n          );\n\n          // 에러 인터셉터 실행\n          const processedError = await interceptors.error.run(fetchError);\n\n          // 만약 인터셉터가 NextTypeResponse를 반환하면 정상 응답으로 처리\n          if (\"data\" in processedError && \"status\" in processedError) {\n            return processedError as NextTypeResponse<T>;\n          }\n\n          // 처리된 에러 던짐\n          throw processedError;\n        }\n\n        // NextTypeResponse 생성\n        const NextTypeResponse: NextTypeResponse<T> = {\n          data: responseData as T,\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n          config: requestConfig,\n          request: requestInit as unknown as Request,\n        };\n\n        // 응답 인터셉터 실행\n        const processedResponse = await interceptors.response.run(\n          NextTypeResponse\n        );\n\n        // 스키마 검증 (스키마가 제공된 경우)\n        if (schema) {\n          try {\n            const validatedData = schema.parse(processedResponse.data);\n\n            // 검증된 데이터로 업데이트\n            processedResponse.data = validatedData as T;\n\n            return processedResponse;\n          } catch (validationError) {\n            // 스키마 검증 실패\n            if (validationError instanceof z.ZodError) {\n              const fetchError = new FetchError(\n                \"Validation failed\",\n                requestConfig,\n                \"ERR_VALIDATION\",\n                requestInit as unknown as Request,\n                response,\n                processedResponse.data\n              );\n\n              fetchError.name = \"ValidationError\";\n\n              // 에러 인터셉터 실행\n              const processedError = await interceptors.error.run(fetchError);\n\n              // 만약 인터셉터가 NextTypeResponse를 반환하면 정상 응답으로 처리\n              if (\"data\" in processedError && \"status\" in processedError) {\n                return processedError as NextTypeResponse<T>;\n              }\n\n              throw processedError;\n            }\n\n            // 알 수 없는 검증 오류\n            const fetchError = new FetchError(\n              \"Unknown validation error\",\n              requestConfig,\n              \"ERR_VALIDATION_UNKNOWN\",\n              requestInit as unknown as Request,\n              response,\n              processedResponse.data\n            );\n\n            // 에러 인터셉터 실행\n            const processedError = await interceptors.error.run(fetchError);\n\n            // 만약 인터셉터가 NextTypeResponse를 반환하면 정상 응답으로 처리\n            if (\"data\" in processedError && \"status\" in processedError) {\n              return processedError as NextTypeResponse<T>;\n            }\n\n            throw processedError;\n          }\n        }\n\n        // 스키마 없이 응답 반환\n        return processedResponse;\n      } catch (error) {\n        // 401 인증 오류 처리 (authRetry 옵션 적용)\n        if (\n          error instanceof FetchError &&\n          authRetryOption &&\n          typeof authRetryOption.handler === \"function\"\n        ) {\n          const statusCodes = authRetryOption.statusCodes ?? [401];\n          const statusMatch =\n            error.response && statusCodes.includes(error.response.status);\n          const shouldRetryResult =\n            !authRetryOption.shouldRetry ||\n            authRetryOption.shouldRetry(error, config);\n          if (statusMatch && shouldRetryResult) {\n            authRetryCount = config._authRetryCount || 0;\n            if (authRetryCount < (authRetryOption.limit ?? 1)) {\n              const shouldRetry = await authRetryOption.handler(error, config);\n              if (shouldRetry) {\n                return request<T>({\n                  ...config,\n                  _authRetryCount: authRetryCount + 1,\n                });\n              }\n            }\n          }\n        }\n\n        // FetchError는 에러 인터셉터가 이미 실행되었으므로 그대로 throw\n        if (error instanceof FetchError) {\n          throw error;\n        }\n\n        // 취소된 요청인 경우\n        if (error instanceof Error && error.name === \"AbortError\") {\n          const fetchError = new FetchError(\n            isCanceled ? \"Request was canceled\" : \"Request timed out\",\n            config,\n            isCanceled ? \"ERR_CANCELED\" : \"ERR_TIMEOUT\"\n          );\n\n          // 에러 인터셉터 실행\n          const processedError = await interceptors.error.run(fetchError);\n\n          // 만약 인터셉터가 NextTypeResponse를 반환하면 정상 응답으로 처리\n          if (\"data\" in processedError && \"status\" in processedError) {\n            return processedError as NextTypeResponse<T>;\n          }\n\n          throw processedError;\n        }\n\n        // 재시도 로직\n        if (retryCount < maxRetries && !isCanceled) {\n          // HTTP 에러인 경우 상태 코드를 확인\n          if (\n            error instanceof FetchError &&\n            error.response &&\n            (retryStatusCodes.length === 0 ||\n              retryStatusCodes.includes(error.response.status))\n          ) {\n            retryCount++;\n            // 새 AbortController 생성 (이전 것은 abort되었을 수 있으므로)\n            abortController = new AbortController();\n            // 재시도 간격 계산\n            const delay = retryBackoff(retryCount);\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            return performRequest();\n          }\n\n          // 네트워크 에러인 경우 항상 재시도\n          if (!(error instanceof FetchError)) {\n            retryCount++;\n            // 새 AbortController 생성\n            abortController = new AbortController();\n            // 재시도 간격 계산\n            const delay = retryBackoff(retryCount);\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            return performRequest();\n          }\n        }\n\n        // 모든 재시도가 실패하거나 재시도가 없는 경우\n        // 네트워크 에러 등을 FetchError로 변환\n        const fetchError = new FetchError(\n          error instanceof Error ? error.message : \"Request failed\",\n          config,\n          \"ERR_NETWORK\"\n        );\n\n        // 에러 인터셉터 실행\n        const processedError = await interceptors.error.run(fetchError);\n\n        // 만약 인터셉터가 NextTypeResponse를 반환하면 정상 응답으로 처리\n        if (\"data\" in processedError && \"status\" in processedError) {\n          return processedError as NextTypeResponse<T>;\n        }\n\n        throw processedError;\n      }\n    }\n\n    // 요청 실행 프로미스\n    const requestPromise = performRequest();\n\n    // 취소 가능한 프로미스 생성\n    const cancelablePromise = Object.assign(requestPromise, {\n      cancel,\n      isCanceled: () => isCanceled,\n    }) as CancelablePromise<NextTypeResponse<T>>;\n\n    return cancelablePromise;\n  }\n\n  return request;\n}\n","import type {\n  NextTypeResponse,\n  CancelablePromise,\n  FetchConfig,\n  HttpMethod,\n  RequestConfig,\n} from \"../types\";\nimport { mergeConfigs } from \"../utils\";\n\n/**\n * HTTP 메서드 함수들을 생성합니다.\n * @param request 기본 요청 함수\n * @param defaultConfig 기본 설정\n * @returns HTTP 메서드 함수 객체\n */\nexport function createHttpMethods(\n  request: <T>(config: RequestConfig) => CancelablePromise<NextTypeResponse<T>>,\n  defaultConfig: FetchConfig\n) {\n  return {\n    get<T>(\n      url: string,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"GET\" as HttpMethod,\n        })\n      );\n    },\n\n    post<T>(\n      url: string,\n      data?: unknown,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"POST\" as HttpMethod,\n          data,\n        })\n      );\n    },\n\n    put<T>(\n      url: string,\n      data?: unknown,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"PUT\" as HttpMethod,\n          data,\n        })\n      );\n    },\n\n    delete<T>(\n      url: string,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"DELETE\" as HttpMethod,\n        })\n      );\n    },\n\n    patch<T>(\n      url: string,\n      data?: unknown,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"PATCH\" as HttpMethod,\n          data,\n        })\n      );\n    },\n\n    head<T>(\n      url: string,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"HEAD\" as HttpMethod,\n        })\n      );\n    },\n\n    options<T>(\n      url: string,\n      config: FetchConfig = {}\n    ): CancelablePromise<NextTypeResponse<T>> {\n      return request<T>(\n        mergeConfigs(defaultConfig, {\n          ...config,\n          url,\n          method: \"OPTIONS\" as HttpMethod,\n        })\n      );\n    },\n  };\n}\n","import type { FetchConfig, NextTypeFetch } from \"../types\";\nimport { createInterceptors } from \"../interceptors\";\nimport { createRequestFunction } from \"./request\";\nimport { createHttpMethods } from \"../methods\";\nimport { ErrorCode } from \"../utils/error\";\n\n/**\n * Next.js App Router와 함께 사용할 수 있는 타입 안전한 fetch 클라이언트를 생성합니다.\n * @param defaultConfig 기본 설정\n * @returns fetch 클라이언트 인스턴스\n */\nexport function createFetch(defaultConfig: FetchConfig = {}): NextTypeFetch {\n  // 사용자 설정 적용\n  const mergedConfig: FetchConfig = {\n    ...defaultConfig,\n  };\n\n  // 인터셉터 생성\n  const interceptors = createInterceptors();\n\n  // 요청 함수 생성\n  const request = createRequestFunction(mergedConfig, interceptors);\n\n  // HTTP 메서드 생성\n  const methods = createHttpMethods(request, mergedConfig);\n\n  // 클라이언트 인스턴스 생성\n  const instance: NextTypeFetch = {\n    defaults: mergedConfig,\n    interceptors,\n    request,\n    ...methods,\n  };\n\n  return instance;\n}\n\n// 에러 코드 상수 노출\nexport { ErrorCode };\n","import { createFetch } from \"./core/client\";\nimport type { FetchConfig, NextTypeFetch } from \"./types\";\n\n/**\n * 기본 fetch 인스턴스\n */\nconst defaultInstance = createFetch();\n\n/**\n * 기본 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const request = defaultInstance.request;\n\n/**\n * GET 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const get = defaultInstance.get;\n\n/**\n * POST 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const post = defaultInstance.post;\n\n/**\n * PUT 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const put = defaultInstance.put;\n\n/**\n * DELETE 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const del = defaultInstance.delete;\n\n/**\n * PATCH 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const patch = defaultInstance.patch;\n\n/**\n * HEAD 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const head = defaultInstance.head;\n\n/**\n * OPTIONS 요청 메서드 - 인스턴스 생성 없이 바로 사용 가능\n */\nexport const options = defaultInstance.options;\n\n/**\n * 기본 설정 - 전역 설정 변경 가능\n * 라이브러리 이름(Next Type Fetch)의 약자를 사용한 고유명사\n */\nexport const ntFetch: FetchConfig = defaultInstance.defaults;\n\n/**\n * 인터셉터 - 전역 인터셉터 설정 가능\n */\nexport const interceptors = defaultInstance.interceptors;\n\n/**\n * 기본 인스턴스 - 모든 메서드 포함\n */\nexport default defaultInstance as NextTypeFetch;\n","import type { ZodType } from \"zod/v4\";\nimport { isString, isFunction } from \"es-toolkit/compat\";\nimport { FetchConfig, NextTypeFetch } from \"../../types\";\n\n/**\n * 기본 Query 설정 (공통 속성)\n */\ninterface BaseQueryConfig<Params = void, Schema extends ZodType = ZodType> {\n  cacheKey: (params?: Params) => readonly unknown[];\n  schema?: Schema;\n  placeholderData?:\n    | any\n    | ((\n        prev?: any,\n        prevQuery?: import(\"../cache/query-cache\").QueryState<any>\n      ) => any);\n  fetchConfig?: Omit<FetchConfig, \"url\" | \"method\" | \"params\" | \"data\">;\n  select?: (data: any) => any;\n  enabled?: boolean | ((params?: Params) => boolean);\n}\n\n/**\n * URL 기반 Query 설정\n */\ninterface UrlBasedQueryConfig<Params = void, Schema extends ZodType = ZodType>\n  extends BaseQueryConfig<Params, Schema> {\n  /**\n   * API 요청 URL을 생성하는 함수\n   */\n  url: (params?: Params) => string;\n\n  /**\n   * queryFn이 있으면 안됨 (상호 배제)\n   */\n  queryFn?: never;\n}\n\n/**\n * Custom Function 기반 Query 설정\n */\ninterface FunctionBasedQueryConfig<\n  Params = void,\n  Schema extends ZodType = ZodType\n> extends BaseQueryConfig<Params, Schema> {\n  /**\n   * Custom query function for complex requests\n   * 복잡한 요청을 처리할 수 있는 사용자 정의 함수\n   */\n  queryFn: (params: Params, fetcher: NextTypeFetch) => Promise<any>;\n\n  /**\n   * url이 있으면 안됨 (상호 배제)\n   */\n  url?: never;\n}\n\n/**\n * Query를 정의하기 위한 설정 객체 인터페이스\n * URL 방식 또는 Custom Function 방식 중 하나를 선택할 수 있음\n */\nexport type QueryConfig<Params = void, Schema extends ZodType = ZodType> =\n  | UrlBasedQueryConfig<Params, Schema>\n  | FunctionBasedQueryConfig<Params, Schema>;\n\nexport type QueryFactoryInput = Record<string, QueryConfig<any, any>>;\n\nexport type ExtractParams<T> = T extends QueryConfig<infer P, any> ? P : never;\n\n/**\n * 에러 메시지 상수\n */\nconst ERROR_MESSAGES = {\n  BOTH_APPROACHES:\n    \"QueryConfig cannot have both 'queryFn' and 'url' at the same time. \" +\n    \"Choose either custom function approach (queryFn) or URL-based approach (url).\",\n  MISSING_APPROACHES:\n    \"QueryConfig must have either 'queryFn' or 'url'. \" +\n    \"Provide either a custom function or URL-based configuration.\",\n} as const;\n\n/**\n * Query 설정의 유효성을 검증\n * QueryConfig와 UseQueryOptions 모두 지원\n */\nexport function validateQueryConfig(\n  config: QueryConfig<any, any> | any // UseQueryOptions도 받을 수 있도록\n): void {\n  const hasQueryFn = isFunction(config.queryFn);\n  const hasUrl = isFunction(config.url) || isString(config.url); // function 또는 string 둘 다 허용\n\n  if (hasQueryFn && hasUrl) {\n    throw new Error(ERROR_MESSAGES.BOTH_APPROACHES);\n  }\n\n  if (!hasQueryFn && !hasUrl) {\n    throw new Error(ERROR_MESSAGES.MISSING_APPROACHES);\n  }\n}\n\nexport function createQueryFactory<T extends QueryFactoryInput>(defs: T): T {\n  // 각 QueryConfig 검증\n  Object.entries(defs).forEach(([key, config]) => {\n    try {\n      validateQueryConfig(config);\n    } catch (error) {\n      throw new Error(\n        `Invalid QueryConfig for '${key}': ${(error as Error).message}`\n      );\n    }\n  });\n\n  return defs;\n}\n","import type { z, ZodType } from \"zod/v4\";\nimport { isFunction } from \"es-toolkit/compat\";\nimport type {\n  FetchConfig,\n  HttpMethod,\n  QueryKey,\n  NextTypeFetch,\n} from \"../../types\";\n\n/**\n * Zod 스키마가 명확히 있을 때만 z.infer<T>를 사용, 아니면 Fallback\n */\ntype InferIfZodSchema<T, Fallback> = [T] extends [ZodType]\n  ? z.infer<T>\n  : Fallback;\n\n/**\n * 기본 Mutation 설정 (url + method 방식)\n */\ninterface BaseMutationConfig<\n  TVariables = any,\n  TData = any,\n  TError = Error,\n  TContext = unknown,\n  RequestSchema extends ZodType = never,\n  ResponseSchema extends ZodType = never\n> {\n  /**\n   * Mutation을 식별하는 캐시 키입니다. (선택적)\n   * Devtools 등에서 사용될 수 있습니다.\n   */\n  cacheKey?: QueryKey;\n\n  /**\n   * 요청 본문의 유효성 검사를 위한 Zod 스키마입니다. (선택적)\n   */\n  requestSchema?: RequestSchema;\n\n  /**\n   * 응답 데이터의 유효성 검사를 위한 Zod 스키마입니다. (선택적)\n   * 이 스키마로 파싱된 데이터가 TData 타입이 됩니다.\n   */\n  responseSchema?: ResponseSchema;\n\n  /**\n   * Mutation 함수 실행 전 호출되는 콜백입니다. (선택적)\n   * 컨텍스트를 반환하여 onSuccess, onError, onSettled에서 사용할 수 있습니다.\n   */\n  onMutate?: (\n    variables: TVariables\n  ) => Promise<TContext | void> | TContext | void;\n\n  /**\n   * Mutation 성공 시 호출되는 콜백입니다. (선택적)\n   */\n  onSuccess?: (\n    data: InferIfZodSchema<ResponseSchema, TData>,\n    variables: TVariables,\n    context: TContext | undefined\n  ) => Promise<void> | void;\n\n  /**\n   * Mutation 실패 시 호출되는 콜백입니다. (선택적)\n   */\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    context: TContext | undefined\n  ) => Promise<void> | void;\n\n  /**\n   * Mutation 성공 또는 실패 여부와 관계없이 항상 호출되는 콜백입니다. (선택적)\n   */\n  onSettled?: (\n    data: InferIfZodSchema<ResponseSchema, TData> | undefined,\n    error: TError | null,\n    variables: TVariables,\n    context: TContext | undefined\n  ) => Promise<void> | void;\n\n  /**\n   * Mutation 성공 시 무효화할 쿼리 키 목록 또는 동적으로 키 목록을 반환하는 함수입니다. (선택적)\n   */\n  invalidateQueries?:\n    | QueryKey[]\n    | ((\n        data: InferIfZodSchema<ResponseSchema, TData>,\n        variables: TVariables,\n        context: TContext | undefined\n      ) => QueryKey[]);\n\n  /**\n   * 이 Mutation에만 적용될 특정 fetch 설정을 지정합니다. (선택적)\n   * baseURL, timeout, headers 등이 포함될 수 있습니다.\n   */\n  fetchConfig?: Omit<\n    FetchConfig,\n    \"url\" | \"method\" | \"params\" | \"data\" | \"schema\"\n  >;\n}\n\n/**\n * URL + Method 기반 Mutation 설정\n */\ninterface UrlBasedMutationConfig<\n  TVariables = any,\n  TData = any,\n  TError = Error,\n  TContext = unknown,\n  RequestSchema extends ZodType = never,\n  ResponseSchema extends ZodType = never\n> extends BaseMutationConfig<\n    TVariables,\n    TData,\n    TError,\n    TContext,\n    RequestSchema,\n    ResponseSchema\n  > {\n  /**\n   * API 요청 URL을 생성하는 함수 또는 문자열입니다.\n   * TVariables를 인자로 받아 URL 문자열을 반환합니다.\n   */\n  url: string | ((variables: TVariables) => string);\n\n  /**\n   * HTTP 요청 메서드입니다. (예: \"POST\", \"PUT\", \"DELETE\")\n   */\n  method: HttpMethod;\n\n  /**\n   * mutationFn이 있으면 안됨\n   */\n  mutationFn?: never;\n}\n\n/**\n * Custom Function 기반 Mutation 설정\n */\ninterface FunctionBasedMutationConfig<\n  TVariables = any,\n  TData = any,\n  TError = Error,\n  TContext = unknown,\n  RequestSchema extends ZodType = never,\n  ResponseSchema extends ZodType = never\n> extends BaseMutationConfig<\n    TVariables,\n    TData,\n    TError,\n    TContext,\n    RequestSchema,\n    ResponseSchema\n  > {\n  /**\n   * 사용자 정의 mutation 함수입니다.\n   * variables와 fetcher를 인자로 받아 복잡한 로직을 처리할 수 있습니다.\n   */\n  mutationFn: (\n    variables: TVariables,\n    fetcher: NextTypeFetch\n  ) => Promise<InferIfZodSchema<ResponseSchema, TData>>;\n\n  /**\n   * url/method가 있으면 안됨\n   */\n  url?: never;\n  method?: never;\n}\n\n/**\n * Mutation을 정의하기 위한 설정 객체 인터페이스입니다.\n * URL + Method 방식 또는 Custom Function 방식 중 하나를 선택할 수 있습니다.\n */\nexport type MutationConfig<\n  TVariables = any,\n  TData = any,\n  TError = Error,\n  TContext = unknown,\n  RequestSchema extends ZodType = never,\n  ResponseSchema extends ZodType = never\n> =\n  | UrlBasedMutationConfig<\n      TVariables,\n      TData,\n      TError,\n      TContext,\n      RequestSchema,\n      ResponseSchema\n    >\n  | FunctionBasedMutationConfig<\n      TVariables,\n      TData,\n      TError,\n      TContext,\n      RequestSchema,\n      ResponseSchema\n    >;\n\n/**\n * MutationFactory에 전달될 입력 타입입니다.\n * 각 키는 특정 mutation을 나타내며, 값은 해당 mutation의 MutationConfig입니다.\n */\nexport type MutationFactoryInput = Record<\n  string,\n  MutationConfig<any, any, any, any, any, any>\n>;\n\n/**\n * MutationConfig에서 TVariables 타입을 추출합니다.\n */\nexport type ExtractMutationVariables<T> = T extends MutationConfig<\n  infer V,\n  any,\n  any,\n  any,\n  any,\n  any\n>\n  ? V\n  : never;\n\n/**\n * MutationConfig에서 TData 타입을 추출합니다.\n * responseSchema가 있으면 해당 스키마의 추론 타입을, 없으면 TData를 사용합니다.\n */\nexport type ExtractMutationData<T> = T extends MutationConfig<\n  any,\n  infer D,\n  any,\n  any,\n  any,\n  infer RS\n>\n  ? [RS] extends [ZodType]\n    ? z.infer<RS>\n    : D\n  : never;\n\n/**\n * MutationConfig에서 TError 타입을 추출합니다.\n */\nexport type ExtractMutationError<T> = T extends MutationConfig<\n  any,\n  any,\n  infer E,\n  any,\n  any,\n  any\n>\n  ? E\n  : Error;\n\n/**\n * 에러 메시지 상수\n */\nconst ERROR_MESSAGES = {\n  BOTH_APPROACHES:\n    \"MutationConfig cannot have both 'mutationFn' and 'url'+'method' at the same time. \" +\n    \"Choose either custom function approach (mutationFn) or URL-based approach (url + method).\",\n  MISSING_APPROACHES:\n    \"MutationConfig must have either 'mutationFn' or both 'url' and 'method'. \" +\n    \"Provide either a custom function or URL-based configuration.\",\n} as const;\n\n/**\n * Mutation 설정의 유효성을 검증\n */\nexport function validateMutationConfig(\n  config: MutationConfig<any, any, any, any, any, any>\n): void {\n  const hasMutationFn = isFunction(config.mutationFn);\n  const hasUrlMethod = config.url && config.method;\n\n  if (hasMutationFn && hasUrlMethod) {\n    throw new Error(ERROR_MESSAGES.BOTH_APPROACHES);\n  }\n\n  if (!hasMutationFn && !hasUrlMethod) {\n    throw new Error(ERROR_MESSAGES.MISSING_APPROACHES);\n  }\n}\n\n/**\n * Mutation 정의 객체를 받아 그대로 반환하는 팩토리 함수입니다.\n * 타입 추론을 돕고, 중앙에서 mutation들을 관리할 수 있게 합니다.\n * @param defs Mutation 정의 객체\n * @returns 전달된 Mutation 정의 객체\n */\nexport function createMutationFactory<T extends MutationFactoryInput>(\n  defs: T\n): T {\n  // 각 MutationConfig 검증\n  Object.entries(defs).forEach(([key, config]) => {\n    try {\n      validateMutationConfig(config);\n    } catch (error) {\n      throw new Error(\n        `Invalid MutationConfig for '${key}': ${(error as Error).message}`\n      );\n    }\n  });\n\n  return defs;\n}\n","import { isArray, isString } from \"es-toolkit/compat\";\nimport QuickLRU from \"quick-lru\";\n\n/**\n * 쿼리키를 직렬화하여 string으로 변환합니다.\n * @param key 쿼리키(배열 또는 문자열)\n */\nexport function serializeQueryKey(key: string | readonly unknown[]): string {\n  return isArray(key) ? JSON.stringify(key) : isString(key) ? key : String(key);\n}\n\n/**\n * 쿼리 상태 타입\n */\nexport type QueryState<T = unknown> = {\n  data?: T;\n  error?: unknown;\n  isLoading: boolean;\n  isFetching: boolean;\n  updatedAt: number;\n};\n\n/**\n * QueryCache 옵션\n */\nexport interface QueryCacheOptions {\n  /**\n   * 메모리 보호를 위한 최대 쿼리 수 (하드 리미트)\n   * 이 수를 초과하면 LRU(Least Recently Used) 알고리즘으로 가장 오래된 쿼리부터 즉시 제거됩니다.\n   * gcTime과는 별개로 동작하며, 메모리 사용량을 제한하는 안전장치 역할을 합니다.\n   * @default 1000\n   */\n  maxQueries?: number;\n}\n\n/**\n * 타이머 타입 (브라우저/Node.js 호환)\n */\ntype TimerHandle = ReturnType<typeof setTimeout>;\n\n/**\n * 쿼리 캐시 클래스\n *\n * 두 가지 캐시 전략을 사용합니다:\n * 1. **메모리 보호 (Hard Limit)**: maxQueries로 설정된 수를 초과하면 LRU 알고리즘으로 즉시 제거\n * 2. **생명주기 관리 (Soft Limit)**: 구독자가 0이 된 후 gcTime 시간이 지나면 가비지 컬렉션으로 제거\n */\nexport class QueryCache {\n  private cache: QuickLRU<string, QueryState>;\n  private subscribers = new Map<string, number>();\n  private listeners = new Map<string, Set<() => void>>();\n  private gcTimers = new Map<string, TimerHandle>();\n\n  constructor(options: QueryCacheOptions = {}) {\n    const { maxQueries = 1000 } = options;\n    this.cache = new QuickLRU({\n      maxSize: maxQueries,\n      onEviction: (key: string, value: QueryState) => {\n        // LRU에 의해 자동 제거될 때 메타데이터도 함께 정리\n        this.cleanupMetadata(key);\n      },\n    });\n  }\n\n  /**\n   * 특정 키의 메타데이터를 정리합니다.\n   */\n  private cleanupMetadata(sKey: string): void {\n    this.subscribers.delete(sKey);\n    this.listeners.delete(sKey);\n    const timer = this.gcTimers.get(sKey);\n    if (timer) {\n      clearTimeout(timer);\n      this.gcTimers.delete(sKey);\n    }\n  }\n\n  set(key: string | readonly unknown[], state: QueryState) {\n    const sKey = serializeQueryKey(key);\n    this.cache.set(sKey, state);\n    this.notifyListeners(sKey);\n  }\n\n  get<T = any>(key: string | readonly unknown[]): QueryState<T> | undefined {\n    const result = this.cache.get(serializeQueryKey(key)) as\n      | QueryState<T>\n      | undefined;\n    return result;\n  }\n\n  has(key: string | readonly unknown[]): boolean {\n    const result = this.cache.has(serializeQueryKey(key));\n    return result;\n  }\n\n  delete(key: string | readonly unknown[]): void {\n    const sKey = serializeQueryKey(key);\n    this.cache.delete(sKey);\n    this.cleanupMetadata(sKey);\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.subscribers.clear();\n    this.listeners.clear();\n    this.gcTimers.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    this.gcTimers.clear();\n  }\n\n  getAll(): Record<string, QueryState> {\n    const result: Record<string, QueryState> = {};\n    for (const [key, value] of this.cache.entries()) {\n      result[key] = value;\n    }\n    return result;\n  }\n\n  /**\n   * 컴포넌트가 쿼리를 구독하여 refetch 콜백을 등록합니다.\n   * @returns unsubscribe 함수\n   */\n  subscribeListener(\n    key: string | readonly unknown[],\n    listener: () => void\n  ): () => void {\n    const sKey = serializeQueryKey(key);\n    if (!this.listeners.has(sKey)) {\n      this.listeners.set(sKey, new Set());\n    }\n    this.listeners.get(sKey)!.add(listener);\n\n    return () => {\n      const listenerSet = this.listeners.get(sKey);\n      if (listenerSet) {\n        listenerSet.delete(listener);\n        // 빈 Set이 되면 메모리 절약을 위해 제거\n        if (listenerSet.size === 0) {\n          this.listeners.delete(sKey);\n        }\n      }\n    };\n  }\n\n  /**\n   * 특정 쿼리 키의 모든 리스너에게 알림을 보냅니다.\n   */\n  notifyListeners(key: string | readonly unknown[]): void {\n    const sKey = serializeQueryKey(key);\n    Promise.resolve().then(() => {\n      this.listeners.get(sKey)?.forEach((l) => l());\n    });\n  }\n\n  /**\n   * 구독자 수 증가 및 gcTime 타이머 해제 (생명주기 관리)\n   */\n  subscribe(key: string | readonly unknown[]): void {\n    const sKey = serializeQueryKey(key);\n    const prev = this.subscribers.get(sKey) ?? 0;\n    this.subscribers.set(sKey, prev + 1);\n    const timer = this.gcTimers.get(sKey);\n    if (timer) {\n      clearTimeout(timer);\n      this.gcTimers.delete(sKey);\n    }\n  }\n\n  /**\n   * 구독자 수 감소 및 0이 되면 gcTime 타이머 시작 (생명주기 관리)\n   */\n  unsubscribe(key: string | readonly unknown[], gcTime: number): void {\n    const sKey = serializeQueryKey(key);\n    const prev = this.subscribers.get(sKey) ?? 0;\n    if (prev <= 1) {\n      this.subscribers.set(sKey, 0);\n      const timer = setTimeout(() => {\n        this.delete(key);\n      }, gcTime);\n      this.gcTimers.set(sKey, timer);\n    } else {\n      this.subscribers.set(sKey, prev - 1);\n    }\n  }\n\n  serialize(): Record<string, QueryState> {\n    return this.getAll();\n  }\n\n  deserialize(cache: Record<string, QueryState>): void {\n    Object.entries(cache).forEach(([key, state]) => {\n      this.cache.set(key, state);\n    });\n  }\n\n  /**\n   * 현재 캐시 크기를 반환합니다.\n   */\n  get size(): number {\n    return this.cache.size;\n  }\n\n  /**\n   * 캐시의 최대 크기를 반환합니다.\n   */\n  get maxSize(): number {\n    return this.cache.maxSize;\n  }\n\n  /**\n   * 캐시 통계를 반환합니다.\n   *\n   * @description 디버깅 및 모니터링 목적으로 사용됩니다.\n   * 성능 분석, 메모리 사용량 추적, 캐시 상태 확인 등에 활용할 수 있습니다.\n   *\n   * @example\n   * ```typescript\n   * const queryClient = useQueryClient();\n   * const stats = queryClient.getQueryCache().getStats();\n   * console.log('Current cache size:', stats.cacheSize);\n   * console.log('Active GC timers:', stats.activeGcTimersCount);\n   * ```\n   */\n  getStats() {\n    return {\n      /** 현재 캐시된 쿼리 수 */\n      cacheSize: this.cache.size,\n      /** 최대 쿼리 수 (메모리 보호 한계) */\n      maxSize: this.cache.maxSize,\n      /** 활성 구독자 수 */\n      subscribersCount: this.subscribers.size,\n      /** 등록된 리스너 수 */\n      listenersCount: this.listeners.size,\n      /** 활성 GC 타이머 수 (생명주기 관리 중인 쿼리) */\n      activeGcTimersCount: this.gcTimers.size,\n    };\n  }\n}\n","import { QueryCache } from \"../cache/query-cache\";\nimport type { QueryState, QueryCacheOptions } from \"../cache/query-cache\";\nimport { isArray, isString, forEach, isEqual } from \"es-toolkit/compat\";\nimport { createFetch } from \"../../core/client\";\nimport type { FetchConfig, NextTypeFetch } from \"../../types/index\";\nimport type { QueryConfig } from \"../factories/query-factory\";\n\nexport interface QueryClientOptions extends FetchConfig {\n  fetcher?: NextTypeFetch;\n  /**\n   * QueryCache 옵션\n   */\n  queryCache?: QueryCacheOptions;\n}\n\nexport class QueryClient {\n  private cache: QueryCache;\n  private fetcher: NextTypeFetch;\n\n  constructor(options?: QueryClientOptions) {\n    this.cache = new QueryCache(options?.queryCache);\n    this.fetcher = options?.fetcher || createFetch(options);\n  }\n\n  has(key: string | readonly unknown[]): boolean {\n    return this.cache.has(key);\n  }\n\n  getFetcher() {\n    return this.fetcher;\n  }\n\n  /**\n   * 쿼리 상태 조회\n   */\n  get<T = unknown>(\n    key: string | readonly unknown[]\n  ): QueryState<T> | undefined {\n    return this.cache.get<T>(key);\n  }\n\n  /**\n   * 쿼리 상태 저장\n   */\n  set(key: string | readonly unknown[], state: QueryState): void {\n    this.cache.set(key, state);\n  }\n\n  /**\n   * 쿼리 데이터만 업데이트 (optimistic update에 최적화)\n   * 기존 상태(isLoading, isFetching, error)를 유지하면서 data와 updatedAt만 업데이트\n   */\n  setQueryData<T = unknown>(\n    key: string | readonly unknown[],\n    updater: T | ((oldData: T | undefined) => T | undefined)\n  ): void {\n    const existing = this.get<T>(key);\n    \n    const newData = typeof updater === 'function' \n      ? (updater as (oldData: T | undefined) => T | undefined)(existing?.data)\n      : updater;\n\n    // 기존 상태를 유지하면서 data와 updatedAt만 업데이트\n    const newState: QueryState<T> = {\n      data: newData,\n      error: existing?.error,\n      isLoading: existing?.isLoading ?? false,\n      isFetching: existing?.isFetching ?? false,\n      updatedAt: Date.now(),\n    };\n\n    this.set(key, newState);\n  }\n\n  /**\n   * 쿼리 상태 삭제\n   */\n  delete(key: string | readonly unknown[]): void {\n    this.cache.delete(key);\n  }\n\n  /**\n   * 모든 쿼리 상태 반환\n   */\n  getAll(): Record<string, QueryState> {\n    return this.cache.getAll();\n  }\n\n  /**\n   * 모든 쿼리 상태 초기화\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * 특정 쿼리키(혹은 prefix)로 시작하는 모든 쿼리 캐시를 무효화(삭제)\n   * 예: invalidateQueries(['user']) → ['user', ...]로 시작하는 모든 캐시 삭제\n   */\n  invalidateQueries(prefix: string | readonly unknown[]) {\n    const all = this.getAll();\n    if (isArray(prefix)) {\n      const prefixArr = Array.from(prefix);\n      forEach(Object.keys(all), (key) => {\n        try {\n          const keyArr = JSON.parse(key);\n          if (\n            Array.isArray(keyArr) &&\n            isEqual(keyArr.slice(0, prefixArr.length), prefixArr)\n          ) {\n            const currentState = this.cache.get(keyArr);\n            if (currentState) {\n              this.cache.set(keyArr, { ...currentState, updatedAt: 0 });\n            }\n          }\n        } catch {\n          // string key는 무시\n        }\n      });\n    } else {\n      const prefixStr = isString(prefix) ? prefix : String(prefix);\n      forEach(Object.keys(all), (key) => {\n        if (key.startsWith(prefixStr)) {\n          const currentState = this.cache.get(key);\n          if (currentState) {\n            this.cache.set(key, { ...currentState, updatedAt: 0 });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * 구독자 관리 (public)\n   */\n  subscribeListener(\n    key: string | readonly unknown[],\n    listener: () => void\n  ): () => void {\n    return this.cache.subscribeListener(key, listener);\n  }\n  subscribe(key: string | readonly unknown[]): void {\n    this.cache.subscribe(key);\n  }\n  unsubscribe(key: string | readonly unknown[], gcTime: number): void {\n    this.cache.unsubscribe(key, gcTime);\n  }\n\n  // 기존 fetchFn 방식\n  async prefetchQuery<T = unknown>(\n    key: string | readonly unknown[],\n    fetchFn: () => Promise<T>\n  ): Promise<T>;\n\n  // QueryConfig 방식 (오버로드)\n  async prefetchQuery<T = unknown>(\n    query: QueryConfig<any, any>,\n    params: any\n  ): Promise<T>;\n\n  // 구현\n  async prefetchQuery<T = unknown>(\n    keyOrQuery: string | readonly unknown[] | QueryConfig<any, any>,\n    fetchFnOrParams: (() => Promise<T>) | any\n  ): Promise<T> {\n    // QueryConfig 방식인지 확인\n    if (\n      typeof keyOrQuery === \"object\" &&\n      keyOrQuery &&\n      \"cacheKey\" in keyOrQuery\n    ) {\n      const query = keyOrQuery as QueryConfig<any, any>;\n      const params = fetchFnOrParams;\n      const cacheKey = query.cacheKey(params);\n\n      const fetchFn = async (): Promise<T> => {\n        let data: any;\n\n        // queryFn이 있는 경우 커스텀 함수 사용\n        if (query.queryFn) {\n          data = await query.queryFn(params, this.fetcher);\n        } else if (query.url) {\n          // 기존 URL 기반 방식\n          const url = query.url(params);\n          const response = await this.fetcher.get(url, query.fetchConfig);\n          data = response.data;\n        } else {\n          throw new Error(\n            \"Either 'url' or 'queryFn' must be provided in QueryConfig\"\n          );\n        }\n\n        // 스키마 검증\n        if (query.schema) {\n          data = query.schema.parse(data);\n        }\n\n        // select 처리\n        if (query.select) {\n          data = query.select(data);\n        }\n\n        return data;\n      };\n\n      return this.prefetchQuery(cacheKey, fetchFn);\n    }\n\n    // 기존 fetchFn 방식\n    const key = keyOrQuery as string | readonly unknown[];\n    const fetchFn = fetchFnOrParams as () => Promise<T>;\n\n    const data = await fetchFn();\n    this.set(key, {\n      data,\n      error: undefined,\n      isLoading: false,\n      isFetching: false,\n      updatedAt: Date.now(),\n    });\n    return data;\n  }\n\n  dehydrate(): Record<string, QueryState> {\n    return this.cache.serialize();\n  }\n\n  hydrate(cache: Record<string, QueryState>): void {\n    this.cache.deserialize(cache);\n  }\n\n  /**\n   * 캐시 통계를 반환합니다. (디버깅 목적)\n   *\n   * @description 성능 분석, 메모리 사용량 추적, 캐시 상태 확인 등에 활용할 수 있습니다.\n   */\n  getQueryCache() {\n    return this.cache;\n  }\n}\n","import { QueryClient } from \"./query-client\";\nimport type { QueryClientOptions } from \"./query-client\";\nimport type { NextTypeFetch } from \"../../types/index\";\n\n/**\n * 인터셉터 설정 함수 타입\n */\nexport type InterceptorSetupFunction = (fetcher: NextTypeFetch) => void;\n\n/**\n * 인터셉터 설정을 포함한 QueryClient 옵션\n */\nexport interface QueryClientOptionsWithInterceptors extends QueryClientOptions {\n  /**\n   * 인터셉터 설정 함수\n   * fetcher 인스턴스를 받아서 인터셉터를 등록하는 함수\n   */\n  setupInterceptors?: InterceptorSetupFunction;\n}\n\n/**\n * 전역 QueryClient 인스턴스 (클라이언트 환경에서만 사용)\n */\nlet globalQueryClient: QueryClient | undefined = undefined;\n\n/**\n * 기본 QueryClient 옵션\n */\nlet defaultOptions: QueryClientOptionsWithInterceptors | undefined = undefined;\n\n/**\n * 기본 QueryClient 옵션을 설정합니다.\n * 앱 시작 시 한 번만 호출하면 됩니다.\n *\n * @internal React의 configureQueryClient를 사용하는 것을 권장합니다.\n */\nexport function setDefaultQueryClientOptions(\n  options: QueryClientOptionsWithInterceptors\n): void {\n  defaultOptions = options;\n\n  // 클라이언트 환경에서 이미 생성된 전역 인스턴스가 있다면 재생성\n  if (typeof window !== \"undefined\" && globalQueryClient) {\n    globalQueryClient = undefined;\n  }\n}\n\n/**\n * 인터셉터 설정을 포함한 QueryClient를 생성합니다.\n */\nfunction createQueryClientWithSetup(\n  options?: QueryClientOptionsWithInterceptors\n): QueryClient {\n  if (!options?.setupInterceptors) {\n    return new QueryClient(options);\n  }\n\n  const { setupInterceptors, ...clientOptions } = options;\n  const client = new QueryClient(clientOptions);\n\n  // 인터셉터 설정 실행\n  setupInterceptors(client.getFetcher());\n\n  return client;\n}\n\n/**\n * 환경에 맞는 QueryClient를 자동으로 반환합니다.\n * - 서버 환경: 항상 새로운 인스턴스 생성 (요청 격리)\n * - 클라이언트 환경: 싱글톤 패턴 사용 (상태 유지)\n */\nexport function getQueryClient(\n  options?: QueryClientOptionsWithInterceptors\n): QueryClient {\n  const finalOptions = options || defaultOptions;\n\n  // 서버 환경에서는 항상 새로운 인스턴스 생성\n  if (typeof window === \"undefined\") {\n    return createQueryClientWithSetup(finalOptions);\n  }\n\n  // 클라이언트 환경에서는 싱글톤 패턴 사용\n  if (!globalQueryClient) {\n    globalQueryClient = createQueryClientWithSetup(finalOptions);\n  }\n\n  return globalQueryClient;\n}\n\n/**\n * 클라이언트 환경에서 전역 QueryClient를 재설정합니다.\n * 주로 테스트나 특수한 경우에 사용됩니다.\n */\nexport function resetQueryClient(): void {\n  if (typeof window !== \"undefined\") {\n    globalQueryClient = undefined;\n  }\n}\n\n/**\n * 인터셉터 설정을 포함한 QueryClient 생성 헬퍼 함수\n *\n * @example\n * ```typescript\n * import { createQueryClientWithInterceptors } from 'next-type-fetch';\n *\n * const queryClient = createQueryClientWithInterceptors({\n *   baseURL: 'https://api.example.com',\n * }, (fetcher) => {\n *   // 인터셉터 설정\n *   fetcher.interceptors.request.use((config) => {\n *     config.headers = config.headers || {};\n *     config.headers['Authorization'] = `Bearer ${getToken()}`;\n *     return config;\n *   });\n * });\n * ```\n */\nexport function createQueryClientWithInterceptors(\n  options: QueryClientOptions,\n  setupInterceptors: InterceptorSetupFunction\n): QueryClient {\n  return createQueryClientWithSetup({\n    ...options,\n    setupInterceptors,\n  });\n}\n","import { isEqual, isPlainObject, keys, isArray } from \"es-toolkit/compat\";\n\n/**\n * Structural Sharing 구현\n * es-toolkit/compat 함수들을 사용한 참조 안정성 최적화\n *\n * @description\n * 이 함수는 두 값을 비교하여 값이 동일한 경우 이전 참조를 유지하는\n * \"Structural Sharing\" 최적화를 수행합니다. 이를 통해 React의 렌더링 최적화와\n * 메모이제이션 효과를 얻을 수 있습니다.\n *\n * @param prev - 이전 값\n * @param next - 새로운 값\n * @returns 최적화된 값 (가능한 경우 이전 참조 유지)\n *\n * @example\n * ```typescript\n * const prev = { user: { id: 1, name: 'John' } };\n * const next = { user: { id: 1, name: 'John' } };\n * const result = replaceEqualDeep(prev, next);\n * console.log(result === prev); // true (참조가 유지됨)\n * ```\n */\nexport function replaceEqualDeep<T>(prev: T, next: T): T {\n  // 1. 참조 동일성 체크 (가장 빠른 경로)\n  if (prev === next) {\n    return prev;\n  }\n\n  // 2. 깊은 비교로 값이 같으면 이전 참조 유지 (Structural Sharing)\n  if (isEqual(prev, next)) {\n    return prev;\n  }\n\n  // 3. null/undefined 처리\n  if (prev == null || next == null) {\n    return next;\n  }\n\n  // 4. 배열 처리\n  if (isArray(prev) && isArray(next)) {\n    if (prev.length !== next.length) {\n      return next;\n    }\n\n    let hasChanged = false;\n    const result = prev.map((item, index) => {\n      const nextItem = replaceEqualDeep(item, next[index]);\n      if (nextItem !== item) {\n        hasChanged = true;\n      }\n      return nextItem;\n    });\n\n    return hasChanged ? (result as T) : prev;\n  }\n\n  // 5. 배열과 비배열 타입이 섞인 경우\n  if (isArray(prev) !== isArray(next)) {\n    return next;\n  }\n\n  // 6. 순수 객체 처리\n  if (isPlainObject(prev) && isPlainObject(next)) {\n    const prevObj = prev as Record<string, unknown>;\n    const nextObj = next as Record<string, unknown>;\n    const prevKeys = keys(prevObj);\n    const nextKeys = keys(nextObj);\n\n    // 키 개수가 다르면 새 객체 반환\n    if (prevKeys.length !== nextKeys.length) {\n      return next;\n    }\n\n    let hasChanged = false;\n    const result: Record<string, unknown> = {};\n\n    for (const key of nextKeys) {\n      // 이전 객체에 키가 없으면 새 객체 반환\n      if (!(key in prevObj)) {\n        return next;\n      }\n\n      const prevValue = prevObj[key];\n      const nextValue = nextObj[key];\n      const optimizedValue = replaceEqualDeep(prevValue, nextValue);\n\n      if (optimizedValue !== prevValue) {\n        hasChanged = true;\n      }\n      result[key] = optimizedValue;\n    }\n\n    return hasChanged ? (result as T) : prev;\n  }\n\n  // 7. 객체가 아닌 경우 또는 다른 타입의 객체인 경우\n  return next;\n}\n","import type { QueryObserverResult } from \"../types\";\n\n/**\n * Tracked Properties 구현\n * Proxy를 사용하여 실제 사용된 속성만 추적\n */\nexport class TrackedResult<T = unknown, E = unknown> {\n  private trackedProps = new Set<keyof QueryObserverResult<T, E>>();\n  private result: QueryObserverResult<T, E>;\n  private cachedProxy: QueryObserverResult<T, E> | null = null;\n\n  constructor(result: QueryObserverResult<T, E>) {\n    this.result = result;\n  }\n\n  createProxy(): QueryObserverResult<T, E> {\n    // 이미 캐시된 Proxy가 있으면 재사용\n    if (this.cachedProxy) {\n      return this.cachedProxy;\n    }\n\n    this.cachedProxy = new Proxy(this.result, {\n      get: (target, prop) => {\n        // 속성 접근 추적 - 유효한 프로퍼티만 추적\n        if (typeof prop === \"string\" && prop in target) {\n          this.trackedProps.add(prop as keyof QueryObserverResult<T, E>);\n        }\n        return target[prop as keyof QueryObserverResult<T, E>];\n      },\n    });\n\n    return this.cachedProxy;\n  }\n\n  getTrackedProps(): Set<keyof QueryObserverResult<T, E>> {\n    return this.trackedProps;\n  }\n\n  hasTrackedProp(prop: keyof QueryObserverResult<T, E>): boolean {\n    return this.trackedProps.has(prop);\n  }\n\n  getResult(): QueryObserverResult<T, E> {\n    return this.result;\n  }\n\n  // 결과가 변경될 때 캐시 무효화\n  updateResult(newResult: QueryObserverResult<T, E>): void {\n    this.result = newResult;\n    this.cachedProxy = null; // 캐시 무효화\n  }\n}\n","import type { QueryClient } from \"../../client/query-client\";\nimport type { QueryObserverOptions } from \"../types\";\nimport type { FetchConfig, NextTypeFetch } from \"../../../types/index\";\nimport { PlaceholderManager } from \"./placeholder-manager\";\nimport { isNotNil } from \"es-toolkit/predicate\";\nimport { merge } from \"es-toolkit/compat\";\n\n/**\n * QueryObserver fetch 관리자 클래스\n *\n * @description\n * QueryObserver의 데이터 페칭 로직을 담당합니다.\n * fetch 실행 조건 확인, 실제 데이터 페칭, 상태 업데이트,\n * 에러 처리를 관리합니다.\n */\nexport class FetchManager<T = unknown> {\n  private queryClient: QueryClient;\n  private placeholderManager: PlaceholderManager<T>;\n\n  constructor(\n    queryClient: QueryClient,\n    placeholderManager: PlaceholderManager<T>\n  ) {\n    this.queryClient = queryClient;\n    this.placeholderManager = placeholderManager;\n  }\n\n  /**\n   * Fetch 실행\n   * enabled 옵션과 stale 상태를 확인하여 필요한 경우에만 페칭을 수행합니다.\n   */\n  async executeFetch<T>(\n    cacheKey: string,\n    options: QueryObserverOptions<T>,\n    onComplete?: () => void\n  ): Promise<void> {\n    const { enabled = true, staleTime = 0 } = options;\n\n    if (!enabled) return;\n\n    const cached = this.queryClient.get<T>(cacheKey);\n    const isStale = cached ? Date.now() - cached.updatedAt >= staleTime : true;\n\n    if (!cached || isStale) {\n      await this.fetchData(cacheKey, options, onComplete);\n    }\n  }\n\n  /**\n   * 데이터 페칭\n   * 실제 HTTP 요청을 수행하고 결과를 캐시에 저장합니다.\n   */\n  async fetchData<T>(\n    cacheKey: string,\n    options: QueryObserverOptions<T>,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // fetch 설정이 이미 다른 곳에서 처리되었는지 확인\n      const currentState = this.queryClient.get<T>(cacheKey);\n\n      // 아직 isFetching이 설정되지 않은 경우에만 설정\n      if (currentState && !currentState.isFetching) {\n        this.queryClient.set(cacheKey, {\n          ...currentState,\n          isFetching: true,\n        });\n      }\n\n      // fetch 결과\n      const result = await this.performHttpRequest(options);\n\n      // 성공 상태 저장 - placeholderData 비활성화\n      this.placeholderManager.deactivatePlaceholder();\n\n      this.queryClient.set(cacheKey, {\n        data: result,\n        error: undefined,\n        isLoading: false,\n        isFetching: false,\n        updatedAt: Date.now(),\n      });\n\n      // 완료 콜백 실행\n      onComplete?.();\n    } catch (error: any) {\n      // 에러 상태 저장 - placeholderData 비활성화\n      this.placeholderManager.deactivatePlaceholder();\n\n      this.queryClient.set(cacheKey, {\n        data: undefined as T | undefined,\n        error,\n        isLoading: false,\n        isFetching: false,\n        updatedAt: Date.now(),\n      });\n\n      // 에러 시에도 완료 콜백 실행\n      onComplete?.();\n    }\n  }\n\n  /**\n   * HTTP 요청 수행\n   * 실제 네트워크 요청을 처리하고 스키마 검증을 수행합니다.\n   */\n  private async performHttpRequest<T>(\n    options: QueryObserverOptions<T>\n  ): Promise<T> {\n    const fetcher = this.queryClient.getFetcher();\n\n    // queryFn 방식 처리\n    if (\"queryFn\" in options && options.queryFn) {\n      return this.executeQueryFn(options, fetcher);\n    }\n\n    // URL 방식 처리\n    if (\"url\" in options && options.url) {\n      return this.executeUrlRequest(options, fetcher);\n    }\n\n    // 이론적으로 도달할 수 없는 코드 (타입 시스템이 보장)\n    throw new Error(\n      \"Invalid QueryObserverOptions: neither 'url' nor 'queryFn' is provided\"\n    );\n  }\n\n  /**\n   * queryFn 실행\n   * Factory 방식과 Options 방식을 구분하여 적절한 매개변수로 호출\n   */\n  private async executeQueryFn<T>(\n    options: QueryObserverOptions<T>,\n    fetcher: NextTypeFetch\n  ): Promise<T> {\n    const queryFn = (options as any).queryFn;\n    let result: any;\n\n    // Factory 방식 (params가 있는 경우)\n    if (\"params\" in options && options.params !== undefined) {\n      result = await queryFn(options.params, fetcher);\n    } else {\n      // Options 방식 (fetcher만 전달)\n      result = await queryFn(fetcher);\n    }\n\n    return this.applySchemaValidation(result, options.schema);\n  }\n\n  /**\n   * URL 기반 요청 실행\n   */\n  private async executeUrlRequest<T>(\n    options: QueryObserverOptions<T>,\n    fetcher: NextTypeFetch\n  ): Promise<T> {\n    const url = (options as any).url;\n    const config = this.buildFetchConfig(options);\n    const response = await fetcher.get(url, config);\n\n    return this.applySchemaValidation(response.data, options.schema);\n  }\n\n  /**\n   * Fetch 설정 구성\n   */\n  private buildFetchConfig<T>(options: QueryObserverOptions<T>): FetchConfig {\n    let config: FetchConfig = merge({}, options.fetchConfig ?? {});\n\n    if (isNotNil(options.params)) {\n      config = merge(config, { params: options.params });\n    }\n    if (isNotNil(options.schema)) {\n      config = merge(config, { schema: options.schema });\n    }\n\n    return config;\n  }\n\n  /**\n   * 스키마 검증 적용\n   */\n  private applySchemaValidation<T>(data: any, schema?: any): T {\n    if (schema) {\n      return schema.parse(data) as T;\n    }\n    return data as T;\n  }\n\n  /**\n   * 수동 refetch\n   * 캐시 키와 옵션을 받아 즉시 데이터를 다시 페칭합니다.\n   */\n  async refetch<T>(\n    cacheKey: string,\n    options: QueryObserverOptions<T>,\n    onComplete?: () => void\n  ): Promise<void> {\n    await this.fetchData(cacheKey, options, onComplete);\n  }\n\n  /**\n   * 페칭 상태 확인\n   * 현재 페칭 중인지 확인합니다.\n   */\n  isFetching<T>(cacheKey: string): boolean {\n    const cached = this.queryClient.get<T>(cacheKey);\n    return cached?.isFetching ?? false;\n  }\n\n  /**\n   * Stale 상태 확인\n   * 캐시된 데이터가 stale한지 확인합니다.\n   */\n  isStale<T>(cacheKey: string, staleTime: number = 0): boolean {\n    const cached = this.queryClient.get<T>(cacheKey);\n    return cached ? Date.now() - cached.updatedAt >= staleTime : true;\n  }\n}\n","import type { QueryClient } from \"../../client/query-client\";\nimport type { QueryObserverOptions } from \"../types\";\nimport { serializeQueryKey } from \"../../cache/query-cache\";\nimport { PlaceholderManager } from \"./placeholder-manager\";\nimport { pick } from \"es-toolkit/compat\";\n\n/**\n * 옵션 변경 처리 콜백 타입\n */\nexport interface OptionsChangeCallbacks<T, E> {\n  updateResult: () => boolean;\n  scheduleNotifyListeners: () => void;\n  executeFetch: () => Promise<void>;\n  subscribeToCache: () => void;\n  computeResult: () => any;\n  handleCachedDataAvailable: () => void;\n  handleNoCachedData: () => void;\n}\n\n/**\n * QueryObserver 옵션 관리자 클래스\n *\n * @description\n * QueryObserver의 옵션 관리 로직을 담당합니다.\n * 옵션 해시 생성, 변경 감지, 키 변경 처리,\n * 상태 초기화 등을 관리합니다.\n */\nexport class OptionsManager<T = unknown, E = unknown> {\n  private queryClient: QueryClient;\n  private placeholderManager: PlaceholderManager<T>;\n\n  constructor(\n    queryClient: QueryClient,\n    placeholderManager: PlaceholderManager<T>\n  ) {\n    this.queryClient = queryClient;\n    this.placeholderManager = placeholderManager;\n  }\n\n  /**\n   * 옵션 해시 생성\n   * 해시에 포함할 속성들만 선택하여 JSON 직렬화\n   */\n  createOptionsHash<T>(options: QueryObserverOptions<T>): string {\n    // pick을 사용하여 해시에 포함할 속성들만 선택\n    const hashableOptions = pick(options, [\n      \"key\",\n      \"url\",\n      \"params\",\n      \"enabled\",\n      \"staleTime\",\n      \"gcTime\",\n      // queryFn은 함수이므로 해시에서 제외 (함수 참조는 항상 다르므로)\n    ]);\n    return JSON.stringify(hashableOptions);\n  }\n\n  /**\n   * 옵션 변경 여부 확인\n   */\n  isOptionsUnchanged(prevHash: string, newHash: string): boolean {\n    return prevHash === newHash;\n  }\n\n  /**\n   * 키 변경 여부 확인\n   */\n  isKeyChanged(prevKey: string, newKey: string): boolean {\n    return prevKey !== newKey;\n  }\n\n  /**\n   * 옵션만 업데이트 (키는 동일)\n   */\n  updateOptionsOnly<T>(\n    options: QueryObserverOptions<T>,\n    callbacks: OptionsChangeCallbacks<T, E>\n  ): void {\n    const hasChanged = callbacks.updateResult();\n    if (hasChanged) {\n      callbacks.scheduleNotifyListeners();\n    }\n  }\n\n  /**\n   * 옵션과 키 업데이트\n   */\n  updateOptionsAndKey<T>(\n    options: QueryObserverOptions<T>,\n    newHash: string\n  ): { cacheKey: string; optionsHash: string } {\n    const cacheKey = serializeQueryKey(options.key);\n    return { cacheKey, optionsHash: newHash };\n  }\n\n  /**\n   * 키 변경 처리\n   */\n  handleKeyChange<T>(\n    prevOptions: QueryObserverOptions<T>,\n    newCacheKey: string,\n    callbacks: OptionsChangeCallbacks<T, E>\n  ): void {\n    // 이전 구독 해제\n    this.unsubscribeFromPreviousKey(prevOptions);\n\n    // 상태 초기화 (PlaceholderData만 처리)\n    this.placeholderManager.deactivatePlaceholder();\n\n    // 새 키로 구독\n    callbacks.subscribeToCache();\n\n    // 캐시 상태에 따른 처리\n    if (this.queryClient.has(newCacheKey)) {\n      callbacks.handleCachedDataAvailable();\n    } else {\n      callbacks.handleNoCachedData();\n    }\n  }\n\n  /**\n   * 옵션 변경 처리 (키는 동일)\n   */\n  handleOptionsChange<T>(callbacks: OptionsChangeCallbacks<T, E>): void {\n    // 키는 같지만 다른 옵션이 변경된 경우\n    const hasChanged = callbacks.updateResult();\n    callbacks.executeFetch();\n\n    if (hasChanged) {\n      callbacks.scheduleNotifyListeners();\n    }\n  }\n\n  /**\n   * 이전 키 구독 해제\n   */\n  private unsubscribeFromPreviousKey<T>(\n    prevOptions: QueryObserverOptions<T>\n  ): void {\n    this.queryClient.unsubscribe(prevOptions.key, prevOptions.gcTime || 300000);\n  }\n\n  /**\n   * Observer 상태 초기화 (PlaceholderData만 처리)\n   */\n  resetObserverState(): void {\n    this.placeholderManager.deactivatePlaceholder();\n  }\n\n  /**\n   * 캐시된 데이터 처리 로직\n   */\n  handleCachedDataAvailable<T>(\n    cacheKey: string,\n    options: QueryObserverOptions<T>,\n    callbacks: {\n      computeResult: () => any;\n      executeFetch: () => Promise<void>;\n      scheduleNotifyListeners: () => void;\n    }\n  ): { currentResult: any; lastResultReference: any } {\n    // 캐시된 데이터가 있는 경우: 즉시 결과 업데이트, 백그라운드 fetch\n    const currentResult = callbacks.computeResult();\n    const lastResultReference = currentResult;\n\n    // 백그라운드 fetch가 필요한 경우 캐시 상태 미리 업데이트\n    const cached = this.queryClient.get<T>(cacheKey);\n    const isStale = cached\n      ? Date.now() - cached.updatedAt >= (options.staleTime || 0)\n      : true;\n    const shouldFetch = isStale && options.enabled !== false;\n\n    if (shouldFetch && cached) {\n      // 백그라운드 fetch 시작을 위해 isFetching 상태 미리 설정\n      this.queryClient.set(cacheKey, {\n        ...cached,\n        isFetching: true,\n      });\n\n      // 결과 재계산하여 isFetching: true 반영\n      const updatedResult = callbacks.computeResult();\n      callbacks.executeFetch();\n      callbacks.scheduleNotifyListeners();\n\n      return {\n        currentResult: updatedResult,\n        lastResultReference: updatedResult,\n      };\n    }\n\n    // 백그라운드에서 fetch 수행\n    callbacks.executeFetch();\n\n    // 단일 렌더링을 위해 한 번만 알림\n    callbacks.scheduleNotifyListeners();\n\n    return { currentResult, lastResultReference };\n  }\n\n  /**\n   * 캐시된 데이터가 없는 경우 처리\n   */\n  handleNoCachedData<T>(callbacks: OptionsChangeCallbacks<T, E>): void {\n    // 캐시가 없는 경우: placeholderData 사용 가능\n    const hasChanged = callbacks.updateResult();\n    callbacks.executeFetch();\n\n    if (hasChanged) {\n      callbacks.scheduleNotifyListeners();\n    }\n  }\n}\n","import type { QueryClient } from \"../../client/query-client\";\nimport type { QueryState } from \"../../cache/query-cache\";\nimport type { QueryObserverOptions } from \"../types\";\nimport { isEqual, isNil } from \"es-toolkit/compat\";\nimport { isFunction } from \"es-toolkit/predicate\";\n\n/**\n * PlaceholderData 상태 타입\n */\nexport interface PlaceholderState {\n  data: any;\n  isActive: boolean;\n}\n\n/**\n * PlaceholderData 관리자 클래스\n *\n * @description\n * placeholderData 처리를 담당합니다.\n * 캐시와 완전히 독립적으로 UI 레벨에서만 관리되며,\n * 이전 쿼리 데이터를 찾아서 placeholderData로 사용할 수 있습니다.\n */\nexport class PlaceholderManager<T = unknown> {\n  private queryClient: QueryClient;\n  private placeholderState: PlaceholderState | null = null;\n\n  constructor(queryClient: QueryClient) {\n    this.queryClient = queryClient;\n  }\n\n  /**\n   * placeholderData 계산\n   * 캐시와 완전히 독립적으로 처리\n   */\n  computePlaceholderData<T>(options: QueryObserverOptions<T>): any {\n    const { placeholderData } = options;\n\n    if (!placeholderData) return undefined;\n\n    // 직접 값이 제공된 경우 (함수가 아닌 경우)\n    if (!isFunction(placeholderData)) {\n      return placeholderData;\n    }\n\n    // 함수인 경우: 이전 쿼리 데이터 찾기\n    const prevQuery = this.findPreviousQuery(options);\n\n    if (!prevQuery || prevQuery.data === undefined) return undefined;\n\n    return placeholderData(prevQuery.data, prevQuery);\n  }\n\n  /**\n   * 이전 쿼리 데이터 찾기\n   * 같은 타입의 쿼리 중에서 가장 최근에 성공한 쿼리를 찾습니다.\n   */\n  private findPreviousQuery<T>(\n    options: QueryObserverOptions<T>\n  ): QueryState<T> | undefined {\n    const allQueries = this.queryClient.getAll();\n    const currentKey = options.key;\n\n    let mostRecentQuery: QueryState<T> | undefined;\n    let mostRecentTime = 0;\n\n    for (const [keyStr, state] of Object.entries(allQueries)) {\n      try {\n        const keyArray = JSON.parse(keyStr);\n\n        if (this.isValidPreviousQuery(keyArray, currentKey, state, options)) {\n          const updatedAt = (state as QueryState<T>).updatedAt || 0;\n\n          if (this.isMoreRecent(updatedAt, mostRecentTime)) {\n            mostRecentQuery = state as QueryState<T>;\n            mostRecentTime = updatedAt;\n          }\n        }\n      } catch {\n        // JSON 파싱 실패 시 무시\n      }\n    }\n\n    return mostRecentQuery;\n  }\n\n  /**\n   * 유효한 이전 쿼리인지 확인\n   */\n  private isValidPreviousQuery<T>(\n    keyArray: any,\n    currentKey: readonly unknown[],\n    state: any,\n    options: QueryObserverOptions<T>\n  ): boolean {\n    return (\n      this.isArrayKey(keyArray, options) &&\n      this.isSameQueryType(keyArray, currentKey) &&\n      this.isDifferentQueryKey(keyArray, currentKey) &&\n      this.hasValidData(state)\n    );\n  }\n\n  /**\n   * 배열 키인지 확인\n   */\n  private isArrayKey<T>(\n    keyArray: any,\n    options: QueryObserverOptions<T>\n  ): boolean {\n    return Array.isArray(keyArray) && Array.isArray(options.key);\n  }\n\n  /**\n   * 같은 쿼리 타입인지 확인 (첫 번째 키 요소로 판단)\n   */\n  private isSameQueryType(\n    keyArray: any[],\n    currentKey: readonly unknown[]\n  ): boolean {\n    return keyArray[0] === currentKey[0];\n  }\n\n  /**\n   * 다른 쿼리 키인지 확인 (같은 키는 제외)\n   */\n  private isDifferentQueryKey(\n    keyArray: any[],\n    currentKey: readonly unknown[]\n  ): boolean {\n    return !isEqual(keyArray, currentKey);\n  }\n\n  /**\n   * 유효한 데이터가 있는지 확인\n   */\n  private hasValidData<T>(state: any): boolean {\n    return state && !isNil((state as QueryState<T>).data);\n  }\n\n  /**\n   * 더 최근 데이터인지 확인\n   */\n  private isMoreRecent(updatedAt: number, mostRecentTime: number): boolean {\n    return updatedAt > mostRecentTime;\n  }\n\n  /**\n   * PlaceholderData가 유효한지 확인\n   */\n  hasValidPlaceholderData(placeholderData: any): boolean {\n    return !isNil(placeholderData);\n  }\n\n  /**\n   * PlaceholderState 설정\n   */\n  setPlaceholderState(state: PlaceholderState | null): void {\n    this.placeholderState = state;\n  }\n\n  /**\n   * PlaceholderState 가져오기\n   */\n  getPlaceholderState(): PlaceholderState | null {\n    return this.placeholderState;\n  }\n\n  /**\n   * PlaceholderData 비활성화 (fetch 성공 또는 실패 시)\n   */\n  deactivatePlaceholder(): void {\n    this.placeholderState = null;\n  }\n}\n","import type { QueryClient } from \"../../client/query-client\";\nimport type { QueryState } from \"../../cache/query-cache\";\nimport type { QueryObserverOptions, QueryObserverResult } from \"../types\";\nimport { PlaceholderManager } from \"./placeholder-manager\";\nimport { isNil } from \"es-toolkit/compat\";\n\n/**\n * QueryObserver 결과 계산기 클래스\n *\n * @description\n * QueryObserver의 결과 계산 로직을 담당합니다.\n * 캐시 상태, PlaceholderData, 초기 로딩 상태에 따라\n * 적절한 QueryObserverResult를 생성합니다.\n */\nexport class ResultComputer<T = unknown, E = unknown> {\n  private queryClient: QueryClient;\n  private placeholderManager: PlaceholderManager<T>;\n\n  constructor(\n    queryClient: QueryClient,\n    placeholderManager: PlaceholderManager<T>\n  ) {\n    this.queryClient = queryClient;\n    this.placeholderManager = placeholderManager;\n  }\n\n  /**\n   * 결과 계산\n   * 캐시 상태와 placeholderData를 완전히 분리하여 처리\n   */\n  computeResult(\n    cacheKey: string,\n    options: QueryObserverOptions<T>,\n    refetchFn: () => void\n  ): QueryObserverResult<T, E> {\n    const { enabled = true } = options;\n    const cached = this.queryClient.get<T>(cacheKey);\n\n    // 1. enabled가 false인 경우: 비활성화된 상태 반환\n    if (!enabled) {\n      return this.createDisabledResult(cached, options, refetchFn);\n    }\n\n    // 2. 캐시된 데이터가 있는 경우\n    if (this.hasCachedData(cached)) {\n      return this.createCachedResult(cached!, options, refetchFn);\n    }\n\n    // 3. 캐시가 없는 경우: placeholderData 확인\n    const placeholderData =\n      this.placeholderManager.computePlaceholderData(options);\n    if (this.placeholderManager.hasValidPlaceholderData(placeholderData)) {\n      return this.createPlaceholderResult(placeholderData!, options, refetchFn);\n    }\n\n    // 4. 캐시도 placeholderData도 없는 경우: 초기 loading 상태\n    return this.createInitialLoadingResult(refetchFn);\n  }\n\n  /**\n   * 비활성화된 결과 생성 (enabled: false)\n   */\n  private createDisabledResult(\n    cached: QueryState<T> | undefined,\n    options: QueryObserverOptions<T>,\n    refetchFn: () => void\n  ): QueryObserverResult<T, E> {\n    // enabled가 false일 때는 캐시된 데이터가 있어도 로딩하지 않는 상태\n    if (cached) {\n      const finalData = this.applySelect(cached.data, options);\n      const isStale = this.computeStaleTime(cached.updatedAt, options);\n\n      return {\n        data: finalData,\n        error: cached.error as E,\n        isLoading: false, // enabled: false이므로 로딩하지 않음\n        isFetching: false, // enabled: false이므로 fetch하지 않음\n        isError: !!cached.error,\n        isSuccess: this.isSuccessState(cached),\n        isStale,\n        isPlaceholderData: false,\n        refetch: refetchFn,\n      };\n    }\n\n    // 캐시도 없고 enabled도 false인 경우: 비활성화된 초기 상태\n    this.placeholderManager.deactivatePlaceholder();\n\n    return {\n      data: undefined,\n      error: undefined,\n      isLoading: false, // enabled: false이므로 로딩하지 않음\n      isFetching: false, // enabled: false이므로 fetch하지 않음\n      isError: false,\n      isSuccess: false,\n      isStale: true,\n      isPlaceholderData: false,\n      refetch: refetchFn,\n    };\n  }\n\n  /**\n   * 캐시된 데이터가 있는지 확인\n   */\n  private hasCachedData(cached: QueryState<T> | undefined): boolean {\n    return !!cached;\n  }\n\n  /**\n   * 캐시된 결과 생성\n   */\n  private createCachedResult(\n    cached: QueryState<T>,\n    options: QueryObserverOptions<T>,\n    refetchFn: () => void\n  ): QueryObserverResult<T, E> {\n    const finalData = this.applySelect(cached.data, options);\n    const isStale = this.computeStaleTime(cached.updatedAt, options);\n\n    return {\n      data: finalData,\n      error: cached.error as E,\n      isLoading: cached.isLoading,\n      isFetching: cached.isFetching, // 캐시된 상태의 isFetching 값 사용\n      isError: !!cached.error,\n      isSuccess: this.isSuccessState(cached),\n      isStale,\n      isPlaceholderData: false, // 캐시된 데이터는 항상 false\n      refetch: refetchFn,\n    };\n  }\n\n  /**\n   * PlaceholderData 결과 생성\n   */\n  private createPlaceholderResult(\n    placeholderData: any,\n    options: QueryObserverOptions<T>,\n    refetchFn: () => void\n  ): QueryObserverResult<T, E> {\n    // placeholderData가 있는 경우: success 상태로 시작\n    this.placeholderManager.setPlaceholderState({\n      data: placeholderData,\n      isActive: true,\n    });\n\n    const finalData = this.applySelect(placeholderData as T, options);\n\n    return {\n      data: finalData,\n      error: undefined,\n      isLoading: false, // placeholderData는 success 상태\n      isFetching: true, // 백그라운드에서 fetch 중\n      isError: false,\n      isSuccess: true,\n      isStale: true,\n      isPlaceholderData: true,\n      refetch: refetchFn,\n    };\n  }\n\n  /**\n   * 초기 로딩 결과 생성\n   */\n  private createInitialLoadingResult(\n    refetchFn: () => void\n  ): QueryObserverResult<T, E> {\n    this.placeholderManager.deactivatePlaceholder();\n\n    return {\n      data: undefined,\n      error: undefined,\n      isLoading: true,\n      isFetching: true,\n      isError: false,\n      isSuccess: false,\n      isStale: true,\n      isPlaceholderData: false,\n      refetch: refetchFn,\n    };\n  }\n\n  /**\n   * 성공 상태인지 확인\n   */\n  private isSuccessState(cached: QueryState<T>): boolean {\n    return !cached.isLoading && !cached.error && !isNil(cached.data);\n  }\n\n  /**\n   * select 함수 적용\n   */\n  private applySelect(\n    data: T | React.ReactNode | undefined,\n    options: QueryObserverOptions<T>\n  ): T | undefined {\n    if (isNil(data) || !options.select) return data as T;\n\n    try {\n      return options.select(data as T);\n    } catch {\n      return data as T;\n    }\n  }\n\n  /**\n   * Stale 시간 계산\n   */\n  private computeStaleTime(\n    updatedAt: number,\n    options: QueryObserverOptions<T>\n  ): boolean {\n    return updatedAt\n      ? Date.now() - updatedAt >= (options.staleTime || 0)\n      : true;\n  }\n}\n","import type { QueryClient } from \"../client/query-client\";\nimport { serializeQueryKey } from \"../cache/query-cache\";\nimport { isEmpty } from \"es-toolkit/compat\";\nimport { TrackedResult, replaceEqualDeep } from \"./utils\";\nimport type { QueryObserverOptions, QueryObserverResult } from \"./types\";\nimport {\n  PlaceholderManager,\n  ResultComputer,\n  FetchManager,\n  OptionsManager,\n  type OptionsChangeCallbacks,\n} from \"./managers\";\n\n/**\n *  Observer 패턴 구현\n * placeholderData는 캐시와 완전히 분리하여 UI 레벨에서만 관리\n */\nexport class QueryObserver<T = unknown, E = unknown> {\n  private queryClient: QueryClient;\n  private options: QueryObserverOptions<T>;\n  private listeners = new Set<() => void>();\n  private cacheKey: string;\n  private isDestroyed = false;\n  private currentResult: QueryObserverResult<T, E>;\n  private optionsHash: string = \"\";\n\n  // 결과 캐싱으로 불필요한 렌더링 방지\n  private lastResultReference: QueryObserverResult<T, E> | null = null;\n\n  // Tracked Properties\n  private trackedResult: TrackedResult<T, E> | null = null;\n\n  // PlaceholderData 관리자\n  private placeholderManager: PlaceholderManager<T>;\n\n  // 결과 계산기\n  private resultComputer: ResultComputer<T, E>;\n\n  // Fetch 관리자\n  private fetchManager: FetchManager<T>;\n\n  // 옵션 관리자\n  private optionsManager: OptionsManager<T, E>;\n\n  constructor(queryClient: QueryClient, options: QueryObserverOptions<T>) {\n    this.queryClient = queryClient;\n    this.options = options;\n    this.cacheKey = serializeQueryKey(options.key);\n    this.placeholderManager = new PlaceholderManager<T>(queryClient);\n    this.resultComputer = new ResultComputer(\n      queryClient,\n      this.placeholderManager\n    );\n    this.fetchManager = new FetchManager(queryClient, this.placeholderManager);\n    this.optionsManager = new OptionsManager(\n      queryClient,\n      this.placeholderManager\n    );\n    this.optionsHash = this.optionsManager.createOptionsHash(options);\n\n    // 초기 결과 계산 (placeholderData 고려)\n    this.currentResult = this.computeResult();\n\n    // 캐시 변경 구독\n    this.subscribeToCache();\n\n    // 초기 fetch 실행\n    this.executeFetch();\n  }\n\n  private subscribeToCache(): void {\n    this.queryClient.subscribeListener(this.options.key, () => {\n      if (!this.isDestroyed) {\n        const hasChanged = this.updateResult();\n        if (hasChanged) {\n          this.scheduleNotifyListeners();\n        }\n\n        // invalidateQueries로 인한 무효화 감지 및 자동 refetch\n        this.handlePotentialInvalidation();\n      }\n    });\n\n    this.queryClient.subscribe(this.options.key);\n  }\n\n  /**\n   * invalidateQueries로 인한 무효화 감지 및 처리\n   * updatedAt이 0이면 invalidateQueries로 인한 무효화로 간주\n   */\n  private handlePotentialInvalidation(): void {\n    const { enabled = true } = this.options;\n\n    if (!enabled) return;\n\n    const cached = this.queryClient.get<T>(this.cacheKey);\n    if (cached && cached.updatedAt === 0) {\n      // invalidateQueries로 인한 무효화 감지\n      // 현재 fetching 중이 아니고 로딩 중이 아닌 경우에만 refetch\n      if (!cached.isFetching && !cached.isLoading) {\n        this.fetchData();\n      }\n    }\n  }\n\n  /**\n   * 결과 계산\n   * 캐시 상태와 placeholderData를 완전히 분리하여 처리\n   */\n  private computeResult(): QueryObserverResult<T, E> {\n    return this.resultComputer.computeResult(this.cacheKey, this.options, () =>\n      this.refetch()\n    );\n  }\n\n  /**\n   * Tracked Properties 기반 결과 업데이트\n   * 기본적으로 tracked 모드로 동작\n   */\n  private updateResult(): boolean {\n    const newResult = this.computeResult();\n\n    // Structural Sharing 적용\n    const optimizedResult = this.applyStructuralSharing(newResult);\n\n    // 'tracked' 모드: 실제 사용된 속성만 확인\n    if (this.hasChangeInTrackedProps(optimizedResult)) {\n      this.currentResult = optimizedResult;\n      this.lastResultReference = optimizedResult;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Structural Sharing 적용\n   */\n  private applyStructuralSharing(\n    newResult: QueryObserverResult<T, E>\n  ): QueryObserverResult<T, E> {\n    if (!this.lastResultReference) {\n      return newResult;\n    }\n\n    return replaceEqualDeep(this.lastResultReference, newResult);\n  }\n\n  private hasChangeInTrackedProps(\n    newResult: QueryObserverResult<T, E>\n  ): boolean {\n    // 초기 상태 확인\n    if (this.isInitialState()) {\n      return true;\n    }\n\n    const trackedProps = this.trackedResult!.getTrackedProps();\n\n    // 추적된 속성이 없으면 초기 상태로 간주\n    if (this.hasNoTrackedProperties(trackedProps)) {\n      return true;\n    }\n\n    // 추적된 속성 중 변경된 것이 있는지 확인\n    return this.hasTrackedPropertyChanged(trackedProps, newResult);\n  }\n\n  private isInitialState(): boolean {\n    return !this.lastResultReference || !this.trackedResult;\n  }\n\n  private hasNoTrackedProperties(\n    trackedProps: Set<keyof QueryObserverResult<T, E>>\n  ): boolean {\n    return isEmpty(trackedProps);\n  }\n\n  private hasTrackedPropertyChanged(\n    trackedProps: Set<keyof QueryObserverResult<T, E>>,\n    newResult: QueryObserverResult<T, E>\n  ): boolean {\n    for (const prop of trackedProps) {\n      if (this.lastResultReference![prop] !== newResult[prop]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private async executeFetch(): Promise<void> {\n    await this.fetchManager.executeFetch(this.cacheKey, this.options);\n  }\n\n  private async fetchData(): Promise<void> {\n    await this.fetchManager.fetchData(this.cacheKey, this.options, () => {\n      // fetch 완료 후 결과 업데이트 및 리스너 알림\n      const hasChanged = this.updateResult();\n      if (hasChanged) {\n        this.scheduleNotifyListeners();\n      }\n    });\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach((listener) => listener());\n  }\n\n  /**\n   * 결과 구독 (React 컴포넌트에서 사용)\n   */\n  subscribe(listener: () => void): () => void {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  /**\n   * Tracked Properties가 적용된 현재 결과 반환\n   * TrackedResult 인스턴스를 재사용하여 속성 추적을 유지\n   */\n  getCurrentResult(): QueryObserverResult<T, E> {\n    // TrackedResult가 없으면 새로 생성\n    if (!this.trackedResult) {\n      this.trackedResult = new TrackedResult(this.currentResult);\n    } else if (this.trackedResult.getResult() !== this.currentResult) {\n      // 결과가 변경된 경우 업데이트 (캐시 무효화)\n      this.trackedResult.updateResult(this.currentResult);\n    }\n\n    return this.trackedResult.createProxy();\n  }\n\n  /**\n   * 수동 refetch\n   */\n  refetch(): void {\n    this.fetchManager.refetch(this.cacheKey, this.options, () => {\n      // refetch 완료 후 결과 업데이트 및 리스너 알림\n      const hasChanged = this.updateResult();\n      if (hasChanged) {\n        this.scheduleNotifyListeners();\n      }\n    });\n  }\n\n  /**\n   * 옵션 업데이트 최적화\n   */\n  setOptions(options: QueryObserverOptions<T>): void {\n    const prevKey = this.cacheKey;\n    const prevHash = this.optionsHash;\n    const newHash = this.optionsManager.createOptionsHash(options);\n\n    // 해시가 동일한 경우 함수만 업데이트\n    if (this.optionsManager.isOptionsUnchanged(prevHash, newHash)) {\n      this.options = options;\n      this.optionsManager.updateOptionsOnly(options, this.createCallbacks());\n      return;\n    }\n\n    const prevOptions = this.options;\n    const { cacheKey, optionsHash } = this.optionsManager.updateOptionsAndKey(\n      options,\n      newHash\n    );\n    this.options = options;\n    this.cacheKey = cacheKey;\n    this.optionsHash = optionsHash;\n\n    // 키가 변경된 경우\n    if (this.optionsManager.isKeyChanged(prevKey, this.cacheKey)) {\n      this.trackedResult = null;\n      this.optionsManager.handleKeyChange(\n        prevOptions,\n        this.cacheKey,\n        this.createCallbacks()\n      );\n    } else {\n      this.optionsManager.handleOptionsChange(this.createCallbacks());\n    }\n  }\n\n  private createCallbacks(): OptionsChangeCallbacks<T, E> {\n    return {\n      updateResult: () => this.updateResult(),\n      scheduleNotifyListeners: () => this.scheduleNotifyListeners(),\n      executeFetch: () => this.executeFetch(),\n      subscribeToCache: () => this.subscribeToCache(),\n      computeResult: () => this.computeResult(),\n      handleCachedDataAvailable: () => this.handleCachedDataAvailable(),\n      handleNoCachedData: () => this.handleNoCachedData(),\n    };\n  }\n\n  private handleCachedDataAvailable(): void {\n    // 캐시된 데이터가 있는 경우: 즉시 결과 업데이트, 백그라운드 fetch\n    this.currentResult = this.computeResult();\n    this.lastResultReference = this.currentResult;\n\n    // 백그라운드 fetch가 필요한 경우 캐시 상태 미리 업데이트\n    const cached = this.queryClient.get<T>(this.cacheKey);\n    const isStale = cached\n      ? Date.now() - cached.updatedAt >= (this.options.staleTime || 0)\n      : true;\n    const shouldFetch = isStale && this.options.enabled !== false;\n\n    if (shouldFetch && cached) {\n      // 백그라운드 fetch 시작을 위해 isFetching 상태 미리 설정\n      this.queryClient.set(this.cacheKey, {\n        ...cached,\n        isFetching: true,\n      });\n\n      // 결과 재계산하여 isFetching: true 반영\n      this.currentResult = this.computeResult();\n      this.lastResultReference = this.currentResult;\n    }\n\n    // 백그라운드에서 fetch 수행\n    this.executeFetch();\n\n    // 단일 렌더링을 위해 한 번만 알림\n    this.scheduleNotifyListeners();\n  }\n\n  private handleNoCachedData(): void {\n    // 캐시가 없는 경우: placeholderData 사용 가능\n    const hasChanged = this.updateResult();\n    this.executeFetch();\n\n    if (hasChanged) {\n      this.scheduleNotifyListeners();\n    }\n  }\n\n  private scheduleNotifyListeners(): void {\n    Promise.resolve().then(() => {\n      if (!this.isDestroyed) {\n        this.notifyListeners();\n      }\n    });\n  }\n\n  /**\n   * Observer 정리\n   */\n  destroy(): void {\n    this.isDestroyed = true;\n    this.queryClient.unsubscribe(\n      this.options.key,\n      this.options.gcTime || 300000\n    );\n    this.listeners.clear();\n    this.placeholderManager.deactivatePlaceholder();\n    this.lastResultReference = null;\n    this.trackedResult = null;\n  }\n}\n","import type { QueryClient } from \"../client/query-client\";\nimport type { QueryConfig } from \"../factories/query-factory\";\nimport { getQueryClient } from \"../client/query-client-manager\";\nimport { merge } from \"es-toolkit/compat\";\n\n/**\n * 쿼리 항목 타입\n */\ntype QueryItem =\n  | [QueryConfig<any, any>] // 파라미터가 없는 경우\n  | [QueryConfig<any, any>, any]; // 파라미터가 있는 경우\n\n/**\n * SSR에서 여러 쿼리를 미리 패칭(prefetch)합니다.\n *\n * @example\n * ```typescript\n * // 파라미터가 없는 쿼리\n * await ssrPrefetch([\n *   [queries.users],\n *   [queries.posts, { userId: 1 }], // 파라미터가 있는 경우\n * ]);\n *\n * // 혼합 사용\n * await ssrPrefetch([\n *   [queries.users], // 파라미터 없음\n *   [queries.user, { userId: 1 }], // 파라미터 있음\n *   [queries.posts, { page: 1, limit: 10 }]\n * ]);\n * ```\n *\n * @param queries QueryItem[] 형태의 쿼리 배열\n * @param globalFetchConfig 모든 쿼리에 공통 적용할 fetchConfig (예: baseURL)\n * @param client QueryClient 인스턴스 (선택사항, 제공하지 않으면 자동 생성)\n */\nexport async function ssrPrefetch(\n  queries: Array<QueryItem>,\n  globalFetchConfig: Record<string, any> = {},\n  client?: QueryClient\n): Promise<Record<string, any>> {\n  // client가 제공되지 않으면 자동으로 생성 (서버 환경에서는 새 인스턴스)\n  const queryClient = client || getQueryClient();\n\n  const results = await Promise.allSettled(\n    queries.map(async (queryItem) => {\n      try {\n        // query와 params 추출\n        const [query, params] = queryItem;\n\n        // 전역 fetchConfig를 쿼리 fetchConfig에 병합\n        const mergedQuery = {\n          ...query,\n          fetchConfig: merge({}, globalFetchConfig, query.fetchConfig || {}),\n        };\n\n        // QueryClient의 오버로드된 prefetchQuery 사용\n        await queryClient.prefetchQuery(mergedQuery, params);\n      } catch (error) {\n        console.error(`[ssrPrefetch] Failed to prefetch query:`, error);\n        // 개별 쿼리 실패는 전체 prefetch를 중단하지 않음\n      }\n    })\n  );\n\n  // 실패한 쿼리들 로깅\n  const failures = results.filter(\n    (result): result is PromiseRejectedResult => result.status === \"rejected\"\n  );\n\n  if (failures.length > 0) {\n    console.warn(`[ssrPrefetch] ${failures.length} queries failed to prefetch`);\n  }\n\n  // 캐시된 상태를 반환하여 HydrationBoundary에서 사용할 수 있도록 함\n  return queryClient.dehydrate();\n}\n"]}